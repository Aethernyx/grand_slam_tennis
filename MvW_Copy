{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Table of Contents\n",
    "\n",
    "1. [Data Cleaning](#cleaning) <br>\n",
    "    1.1 [Importing Data and Doing Initial Cleaning](#import+clean) <br>\n",
    "    1.2 [Creating a Column for Gender and Filling Missing Values for Event Type](#gender_column+event_type_fillna) <br>\n",
    "    1.3 [Combining Player 1 and Player 2 Values for Different Shots](#combining_p1+p2) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Data Cleaning\n",
    "<a id='cleaning'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1 Importing Data and Doing Initial Cleaning\n",
    "<a id='import+clean'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = 'Data/cleaned_data.csv'\n",
    "\n",
    "# Loading the cleaned data set I saved to a csv from the initial data collection and cleaning module\n",
    "df = pd.read_csv(data, low_memory=False)\n",
    "\n",
    "# Setting the amount of columns to display to 100 so I can see the entire dataframe\n",
    "pd.set_option(\"display.max_columns\", 100)\n",
    "pd.get_option(\"display.max_columns\")\n",
    "\n",
    "# Setting the amount of rows to display at default to 100\n",
    "pd.set_option('display.max_rows', 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop('Unnamed: 0', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>match_id</th>\n",
       "      <th>match_year</th>\n",
       "      <th>slam</th>\n",
       "      <th>match_num</th>\n",
       "      <th>player_1</th>\n",
       "      <th>player_2</th>\n",
       "      <th>match_status</th>\n",
       "      <th>match_winner</th>\n",
       "      <th>event_type</th>\n",
       "      <th>round</th>\n",
       "      <th>court_name</th>\n",
       "      <th>player_1_nation</th>\n",
       "      <th>player_2_nation</th>\n",
       "      <th>elapsed_time</th>\n",
       "      <th>set_number</th>\n",
       "      <th>p1_games_won</th>\n",
       "      <th>p2_games_won</th>\n",
       "      <th>set_winner</th>\n",
       "      <th>game_number</th>\n",
       "      <th>game_winner</th>\n",
       "      <th>point_number</th>\n",
       "      <th>point_winner</th>\n",
       "      <th>point_server</th>\n",
       "      <th>serve_speed_kmh</th>\n",
       "      <th>rally</th>\n",
       "      <th>p1_score</th>\n",
       "      <th>p2_score</th>\n",
       "      <th>p1_momentum</th>\n",
       "      <th>p2_momentum</th>\n",
       "      <th>p1_points_won</th>\n",
       "      <th>p2_points_won</th>\n",
       "      <th>p1_ace</th>\n",
       "      <th>p2_ace</th>\n",
       "      <th>p1_shot_winner</th>\n",
       "      <th>p2_shot_winner</th>\n",
       "      <th>p1_double_fault</th>\n",
       "      <th>p2_double_fault</th>\n",
       "      <th>p1_unforced_error</th>\n",
       "      <th>p2_unforced_error</th>\n",
       "      <th>p1_net_point</th>\n",
       "      <th>p2_net_point</th>\n",
       "      <th>p1_net_point_won</th>\n",
       "      <th>p2_net_point_won</th>\n",
       "      <th>p1_break_point</th>\n",
       "      <th>p2_break_point</th>\n",
       "      <th>p1_break_point_won</th>\n",
       "      <th>p2_break_point_won</th>\n",
       "      <th>p1_first_serve_in</th>\n",
       "      <th>p2_first_serve_in</th>\n",
       "      <th>p1_first_serve_won</th>\n",
       "      <th>p2_first_serve_won</th>\n",
       "      <th>p1_second_serve_in</th>\n",
       "      <th>p2_second_serve_in</th>\n",
       "      <th>p1_second_serve_won</th>\n",
       "      <th>p2_second_serve_won</th>\n",
       "      <th>p1_forced_error</th>\n",
       "      <th>p2_forced_error</th>\n",
       "      <th>history</th>\n",
       "      <th>speed_mph</th>\n",
       "      <th>p1_break_point_missed</th>\n",
       "      <th>p2_break_point_missed</th>\n",
       "      <th>serve_indicator</th>\n",
       "      <th>serve_direction</th>\n",
       "      <th>winner_fh</th>\n",
       "      <th>winner_bh</th>\n",
       "      <th>serving_to</th>\n",
       "      <th>serve_number</th>\n",
       "      <th>winner_type</th>\n",
       "      <th>winner_shot_type</th>\n",
       "      <th>p1_distance_run</th>\n",
       "      <th>p2_distance_run</th>\n",
       "      <th>rallycount</th>\n",
       "      <th>serve_width</th>\n",
       "      <th>serve_depth</th>\n",
       "      <th>return_depth</th>\n",
       "      <th>point_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-frenchopen-1101</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>1101.0</td>\n",
       "      <td>Rafael Nadal</td>\n",
       "      <td>John Isner</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>round_1</td>\n",
       "      <td>Court Philippe Chatrier</td>\n",
       "      <td>ESP</td>\n",
       "      <td>USA</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-frenchopen-1101</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>1101.0</td>\n",
       "      <td>Rafael Nadal</td>\n",
       "      <td>John Isner</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>round_1</td>\n",
       "      <td>Court Philippe Chatrier</td>\n",
       "      <td>ESP</td>\n",
       "      <td>USA</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>218.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22020.0</td>\n",
       "      <td>135.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0 days 00:00:00.000000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-frenchopen-1101</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>1101.0</td>\n",
       "      <td>Rafael Nadal</td>\n",
       "      <td>John Isner</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>round_1</td>\n",
       "      <td>Court Philippe Chatrier</td>\n",
       "      <td>ESP</td>\n",
       "      <td>USA</td>\n",
       "      <td>00:00:50</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>162.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11030.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0 days 00:00:50.000000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-frenchopen-1101</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>1101.0</td>\n",
       "      <td>Rafael Nadal</td>\n",
       "      <td>John Isner</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>round_1</td>\n",
       "      <td>Court Philippe Chatrier</td>\n",
       "      <td>ESP</td>\n",
       "      <td>USA</td>\n",
       "      <td>00:01:28</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>179.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15</td>\n",
       "      <td>30</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21410.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0 days 00:00:38.000000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-frenchopen-1101</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>1101.0</td>\n",
       "      <td>Rafael Nadal</td>\n",
       "      <td>John Isner</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>round_1</td>\n",
       "      <td>Court Philippe Chatrier</td>\n",
       "      <td>ESP</td>\n",
       "      <td>USA</td>\n",
       "      <td>00:02:05</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>175.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11010.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0 days 00:00:37.000000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               match_id  match_year        slam  match_num      player_1  \\\n",
       "0  2011-frenchopen-1101      2011.0  frenchopen     1101.0  Rafael Nadal   \n",
       "1  2011-frenchopen-1101      2011.0  frenchopen     1101.0  Rafael Nadal   \n",
       "2  2011-frenchopen-1101      2011.0  frenchopen     1101.0  Rafael Nadal   \n",
       "3  2011-frenchopen-1101      2011.0  frenchopen     1101.0  Rafael Nadal   \n",
       "4  2011-frenchopen-1101      2011.0  frenchopen     1101.0  Rafael Nadal   \n",
       "\n",
       "     player_2 match_status  match_winner event_type    round  \\\n",
       "0  John Isner          NaN           NaN   event_MS  round_1   \n",
       "1  John Isner          NaN           NaN   event_MS  round_1   \n",
       "2  John Isner          NaN           NaN   event_MS  round_1   \n",
       "3  John Isner          NaN           NaN   event_MS  round_1   \n",
       "4  John Isner          NaN           NaN   event_MS  round_1   \n",
       "\n",
       "                court_name player_1_nation player_2_nation elapsed_time  \\\n",
       "0  Court Philippe Chatrier             ESP             USA     00:00:00   \n",
       "1  Court Philippe Chatrier             ESP             USA     00:00:00   \n",
       "2  Court Philippe Chatrier             ESP             USA     00:00:50   \n",
       "3  Court Philippe Chatrier             ESP             USA     00:01:28   \n",
       "4  Court Philippe Chatrier             ESP             USA     00:02:05   \n",
       "\n",
       "   set_number  p1_games_won  p2_games_won  set_winner  game_number  \\\n",
       "0         1.0           0.0           0.0         NaN          1.0   \n",
       "1         1.0           0.0           0.0         NaN          1.0   \n",
       "2         1.0           0.0           0.0         NaN          1.0   \n",
       "3         1.0           0.0           0.0         NaN          1.0   \n",
       "4         1.0           0.0           0.0         NaN          1.0   \n",
       "\n",
       "   game_winner  point_number  point_winner  point_server  serve_speed_kmh  \\\n",
       "0          NaN           0.0           NaN           NaN              0.0   \n",
       "1          NaN           1.0           NaN           NaN            218.0   \n",
       "2          NaN           2.0           NaN           NaN            162.0   \n",
       "3          NaN           3.0           NaN           NaN            179.0   \n",
       "4          NaN           4.0           NaN           NaN            175.0   \n",
       "\n",
       "   rally p1_score p2_score  p1_momentum  p2_momentum  p1_points_won  \\\n",
       "0    0.0        0        0          0.0          0.0            0.0   \n",
       "1   16.0       15        0          1.0          1.0            1.0   \n",
       "2    1.0       15       15          1.0          3.0            1.0   \n",
       "3    1.0       15       30          1.0          6.0            1.0   \n",
       "4    2.0       30       30          4.0          6.0            2.0   \n",
       "\n",
       "   p2_points_won  p1_ace  p2_ace  p1_shot_winner  p2_shot_winner  \\\n",
       "0            0.0     0.0     0.0             0.0             0.0   \n",
       "1            0.0     0.0     0.0             0.0             0.0   \n",
       "2            1.0     0.0     0.0             0.0             0.0   \n",
       "3            2.0     0.0     0.0             0.0             1.0   \n",
       "4            2.0     0.0     0.0             1.0             0.0   \n",
       "\n",
       "   p1_double_fault  p2_double_fault  p1_unforced_error  p2_unforced_error  \\\n",
       "0              0.0              0.0                0.0                0.0   \n",
       "1              0.0              0.0                0.0                1.0   \n",
       "2              0.0              0.0                0.0                0.0   \n",
       "3              0.0              0.0                0.0                0.0   \n",
       "4              0.0              0.0                0.0                0.0   \n",
       "\n",
       "   p1_net_point  p2_net_point  p1_net_point_won  p2_net_point_won  \\\n",
       "0           0.0           0.0               0.0               0.0   \n",
       "1           0.0           0.0               0.0               0.0   \n",
       "2           0.0           0.0               0.0               0.0   \n",
       "3           0.0           1.0               0.0               1.0   \n",
       "4           1.0           1.0               1.0               0.0   \n",
       "\n",
       "   p1_break_point  p2_break_point  p1_break_point_won  p2_break_point_won  \\\n",
       "0             0.0             0.0                 0.0                 0.0   \n",
       "1             0.0             0.0                 0.0                 0.0   \n",
       "2             0.0             0.0                 0.0                 0.0   \n",
       "3             0.0             0.0                 0.0                 0.0   \n",
       "4             0.0             0.0                 0.0                 0.0   \n",
       "\n",
       "   p1_first_serve_in  p2_first_serve_in  p1_first_serve_won  \\\n",
       "0                0.0                0.0                 0.0   \n",
       "1                0.0                1.0                 0.0   \n",
       "2                0.0                0.0                 0.0   \n",
       "3                0.0                0.0                 0.0   \n",
       "4                0.0                0.0                 0.0   \n",
       "\n",
       "   p2_first_serve_won  p1_second_serve_in  p2_second_serve_in  \\\n",
       "0                 0.0                 0.0                 0.0   \n",
       "1                 0.0                 0.0                 0.0   \n",
       "2                 0.0                 0.0                 1.0   \n",
       "3                 0.0                 0.0                 1.0   \n",
       "4                 0.0                 0.0                 1.0   \n",
       "\n",
       "   p1_second_serve_won  p2_second_serve_won  p1_forced_error  p2_forced_error  \\\n",
       "0                  0.0                  0.0              0.0              0.0   \n",
       "1                  0.0                  0.0              0.0              0.0   \n",
       "2                  0.0                  1.0              1.0              0.0   \n",
       "3                  0.0                  1.0              0.0              0.0   \n",
       "4                  0.0                  0.0              0.0              0.0   \n",
       "\n",
       "   history  speed_mph  p1_break_point_missed  p2_break_point_missed  \\\n",
       "0      0.0        0.0                    0.0                    0.0   \n",
       "1  22020.0      135.0                    0.0                    0.0   \n",
       "2  11030.0      100.0                    0.0                    0.0   \n",
       "3  21410.0      111.0                    0.0                    0.0   \n",
       "4  11010.0      108.0                    0.0                    0.0   \n",
       "\n",
       "   serve_indicator  serve_direction  winner_fh  winner_bh serving_to  \\\n",
       "0              0.0              0.0        0.0        0.0        NaN   \n",
       "1              2.0              3.0        0.0        0.0        NaN   \n",
       "2              2.0              1.0        0.0        0.0        NaN   \n",
       "3              2.0              1.0        1.0        0.0        NaN   \n",
       "4              2.0              3.0        1.0        0.0        NaN   \n",
       "\n",
       "   serve_number winner_type winner_shot_type  p1_distance_run  \\\n",
       "0           NaN         NaN              NaN              NaN   \n",
       "1           NaN         NaN              NaN              NaN   \n",
       "2           NaN         NaN              NaN              NaN   \n",
       "3           NaN         NaN              NaN              NaN   \n",
       "4           NaN         NaN              NaN              NaN   \n",
       "\n",
       "   p2_distance_run  rallycount serve_width serve_depth return_depth  \\\n",
       "0              NaN         NaN         NaN         NaN          NaN   \n",
       "1              NaN         NaN         NaN         NaN          NaN   \n",
       "2              NaN         NaN         NaN         NaN          NaN   \n",
       "3              NaN         NaN         NaN         NaN          NaN   \n",
       "4              NaN         NaN         NaN         NaN          NaN   \n",
       "\n",
       "                  point_time  \n",
       "0                        NaN  \n",
       "1  0 days 00:00:00.000000000  \n",
       "2  0 days 00:00:50.000000000  \n",
       "3  0 days 00:00:38.000000000  \n",
       "4  0 days 00:00:37.000000000  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2 Creating a Column for Gender and Filling Missing Values for Event Type\n",
    "<a id='gender_column+event_type_fillna'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "event_MS    52105\n",
       "event_WS    30912\n",
       "Name: event_type, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['event_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a new dataframe of all mens matches\n",
    "men_matches = df[df['event_type'] == 'event_MS']\n",
    "\n",
    "# Creating a list of all mens names listed as player_1\n",
    "test_names = [name for name in men_matches['player_1']]\n",
    "# Creating a list of all mens names listed as player_2\n",
    "test_names_2 = [name for name in men_matches['player_2']]\n",
    "# Adding the names from test_names and test_names_2 together to create a single list of all names\n",
    "men_names = test_names + test_names_2\n",
    "# Converting the list of names to an array\n",
    "men_names = np.array(men_names)\n",
    "\n",
    "# Creating a new dataframe of all womens matches\n",
    "women_matches = df[df['event_type'] == 'event_WS']\n",
    "\n",
    "# Creating a list of all womens names listed as player_1\n",
    "test_names = [name for name in women_matches['player_1']]\n",
    "# Creating a list of all womens names listed as player_2\n",
    "test_names_2 = [name for name in women_matches['player_2']]\n",
    "# Adding the names from test_names and test_names_2 together to create a single list of all names\n",
    "women_names = test_names + test_names_2\n",
    "# Converting the list of names to an array\n",
    "women_names = np.array(women_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Converting the event types where the player 1 or player 2 names are in the men_names array to 'event_MS'\n",
    "df.loc[(df['player_1'].isin(np.unique(men_names))) | \n",
    "       (df['player_2'].isin(np.unique(men_names))) , 'event_type'] = 'event_MS'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Converting the event types where the player 1 or player 2 names are in the women_names array to 'event_WS'\n",
    "df.loc[(df['player_1'].isin(np.unique(women_names))) | \n",
    "       (df['player_2'].isin(np.unique(women_names))) , 'event_type'] = 'event_WS'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "event_MS    570650\n",
       "event_WS    319952\n",
       "Name: event_type, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking new value counts\n",
    "df['event_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>match_year</th>\n",
       "      <td>1069802.0</td>\n",
       "      <td>2014.947523</td>\n",
       "      <td>2.354282</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>2015.000</td>\n",
       "      <td>2017.000</td>\n",
       "      <td>2019.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>match_num</th>\n",
       "      <td>1069802.0</td>\n",
       "      <td>1608.739153</td>\n",
       "      <td>500.498824</td>\n",
       "      <td>1101.0</td>\n",
       "      <td>1161.0</td>\n",
       "      <td>1311.000</td>\n",
       "      <td>2152.000</td>\n",
       "      <td>2701.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>match_winner</th>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>set_number</th>\n",
       "      <td>1130752.0</td>\n",
       "      <td>2.130221</td>\n",
       "      <td>1.068414</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.000</td>\n",
       "      <td>3.000</td>\n",
       "      <td>5.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_games_won</th>\n",
       "      <td>1130752.0</td>\n",
       "      <td>2.383853</td>\n",
       "      <td>1.856530</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.000</td>\n",
       "      <td>4.000</td>\n",
       "      <td>26.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_games_won</th>\n",
       "      <td>1130752.0</td>\n",
       "      <td>2.381237</td>\n",
       "      <td>1.857035</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.000</td>\n",
       "      <td>4.000</td>\n",
       "      <td>24.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>set_winner</th>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>game_number</th>\n",
       "      <td>1130752.0</td>\n",
       "      <td>5.608546</td>\n",
       "      <td>3.321704</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.000</td>\n",
       "      <td>8.000</td>\n",
       "      <td>50.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>game_winner</th>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>point_number</th>\n",
       "      <td>1129188.0</td>\n",
       "      <td>103.765098</td>\n",
       "      <td>73.273633</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>91.000</td>\n",
       "      <td>149.000</td>\n",
       "      <td>569.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>point_winner</th>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>point_server</th>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>serve_speed_kmh</th>\n",
       "      <td>1130752.0</td>\n",
       "      <td>125.225403</td>\n",
       "      <td>71.595218</td>\n",
       "      <td>0.0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>151.000</td>\n",
       "      <td>175.000</td>\n",
       "      <td>244.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rally</th>\n",
       "      <td>114538.0</td>\n",
       "      <td>4.093227</td>\n",
       "      <td>3.943212</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>47.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_momentum</th>\n",
       "      <td>548467.0</td>\n",
       "      <td>71.742976</td>\n",
       "      <td>60.940486</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>57.000</td>\n",
       "      <td>105.000</td>\n",
       "      <td>647.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_momentum</th>\n",
       "      <td>548467.0</td>\n",
       "      <td>71.705244</td>\n",
       "      <td>59.728515</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>58.000</td>\n",
       "      <td>105.000</td>\n",
       "      <td>552.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_points_won</th>\n",
       "      <td>1130752.0</td>\n",
       "      <td>51.774132</td>\n",
       "      <td>37.096992</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>45.000</td>\n",
       "      <td>75.000</td>\n",
       "      <td>298.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_points_won</th>\n",
       "      <td>1130752.0</td>\n",
       "      <td>51.732302</td>\n",
       "      <td>36.992075</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>45.000</td>\n",
       "      <td>74.000</td>\n",
       "      <td>271.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_ace</th>\n",
       "      <td>1131390.0</td>\n",
       "      <td>0.034084</td>\n",
       "      <td>0.181444</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_ace</th>\n",
       "      <td>1131390.0</td>\n",
       "      <td>0.032703</td>\n",
       "      <td>0.177859</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_shot_winner</th>\n",
       "      <td>1131390.0</td>\n",
       "      <td>0.162836</td>\n",
       "      <td>0.369216</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_shot_winner</th>\n",
       "      <td>1131390.0</td>\n",
       "      <td>0.161864</td>\n",
       "      <td>0.368326</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_double_fault</th>\n",
       "      <td>1131390.0</td>\n",
       "      <td>0.020207</td>\n",
       "      <td>0.140708</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_double_fault</th>\n",
       "      <td>1131390.0</td>\n",
       "      <td>0.020371</td>\n",
       "      <td>0.141264</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_unforced_error</th>\n",
       "      <td>1131390.0</td>\n",
       "      <td>0.162710</td>\n",
       "      <td>0.369101</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_unforced_error</th>\n",
       "      <td>1131390.0</td>\n",
       "      <td>0.162761</td>\n",
       "      <td>0.369148</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_net_point</th>\n",
       "      <td>1131392.0</td>\n",
       "      <td>0.096029</td>\n",
       "      <td>0.294631</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_net_point</th>\n",
       "      <td>1131392.0</td>\n",
       "      <td>0.094432</td>\n",
       "      <td>0.292429</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_net_point_won</th>\n",
       "      <td>1131392.0</td>\n",
       "      <td>0.064120</td>\n",
       "      <td>0.244967</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_net_point_won</th>\n",
       "      <td>1131392.0</td>\n",
       "      <td>0.063929</td>\n",
       "      <td>0.244627</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_break_point</th>\n",
       "      <td>1131392.0</td>\n",
       "      <td>0.046990</td>\n",
       "      <td>0.211617</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_break_point</th>\n",
       "      <td>1131392.0</td>\n",
       "      <td>0.046722</td>\n",
       "      <td>0.211043</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_break_point_won</th>\n",
       "      <td>1131392.0</td>\n",
       "      <td>0.019797</td>\n",
       "      <td>0.139302</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_break_point_won</th>\n",
       "      <td>1131392.0</td>\n",
       "      <td>0.019547</td>\n",
       "      <td>0.138436</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_first_serve_in</th>\n",
       "      <td>114538.0</td>\n",
       "      <td>0.308107</td>\n",
       "      <td>0.461713</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_first_serve_in</th>\n",
       "      <td>114538.0</td>\n",
       "      <td>0.306195</td>\n",
       "      <td>0.460914</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_first_serve_won</th>\n",
       "      <td>114538.0</td>\n",
       "      <td>0.207887</td>\n",
       "      <td>0.405798</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_first_serve_won</th>\n",
       "      <td>114538.0</td>\n",
       "      <td>0.209511</td>\n",
       "      <td>0.406962</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_second_serve_in</th>\n",
       "      <td>114538.0</td>\n",
       "      <td>0.172205</td>\n",
       "      <td>0.377560</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_second_serve_in</th>\n",
       "      <td>114538.0</td>\n",
       "      <td>0.169105</td>\n",
       "      <td>0.374847</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_second_serve_won</th>\n",
       "      <td>114538.0</td>\n",
       "      <td>0.091612</td>\n",
       "      <td>0.288478</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_second_serve_won</th>\n",
       "      <td>114538.0</td>\n",
       "      <td>0.091018</td>\n",
       "      <td>0.287636</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_forced_error</th>\n",
       "      <td>114538.0</td>\n",
       "      <td>0.171725</td>\n",
       "      <td>0.377143</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_forced_error</th>\n",
       "      <td>114538.0</td>\n",
       "      <td>0.170983</td>\n",
       "      <td>0.376495</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>history</th>\n",
       "      <td>1125542.0</td>\n",
       "      <td>16756.580256</td>\n",
       "      <td>5100.075203</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12010.0</td>\n",
       "      <td>15001.000</td>\n",
       "      <td>21530.000</td>\n",
       "      <td>26004.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>speed_mph</th>\n",
       "      <td>1130752.0</td>\n",
       "      <td>77.787342</td>\n",
       "      <td>44.480158</td>\n",
       "      <td>0.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>94.000</td>\n",
       "      <td>108.000</td>\n",
       "      <td>152.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_break_point_missed</th>\n",
       "      <td>1131392.0</td>\n",
       "      <td>0.044887</td>\n",
       "      <td>0.207056</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_break_point_missed</th>\n",
       "      <td>1131392.0</td>\n",
       "      <td>0.044536</td>\n",
       "      <td>0.206283</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>serve_indicator</th>\n",
       "      <td>1131392.0</td>\n",
       "      <td>1.492525</td>\n",
       "      <td>0.510201</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>2.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>serve_direction</th>\n",
       "      <td>83016.0</td>\n",
       "      <td>1.877036</td>\n",
       "      <td>0.887700</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.000</td>\n",
       "      <td>3.000</td>\n",
       "      <td>3.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>winner_fh</th>\n",
       "      <td>83016.0</td>\n",
       "      <td>0.163523</td>\n",
       "      <td>0.369844</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>winner_bh</th>\n",
       "      <td>83016.0</td>\n",
       "      <td>0.082370</td>\n",
       "      <td>0.274929</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>serve_number</th>\n",
       "      <td>751020.0</td>\n",
       "      <td>1.289863</td>\n",
       "      <td>0.549916</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>2.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_distance_run</th>\n",
       "      <td>587620.0</td>\n",
       "      <td>8.201076</td>\n",
       "      <td>15.282920</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.859</td>\n",
       "      <td>10.546</td>\n",
       "      <td>318.110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_distance_run</th>\n",
       "      <td>587620.0</td>\n",
       "      <td>8.225362</td>\n",
       "      <td>15.362344</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.878</td>\n",
       "      <td>10.582</td>\n",
       "      <td>445.469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rallycount</th>\n",
       "      <td>430839.0</td>\n",
       "      <td>3.283946</td>\n",
       "      <td>3.312369</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.000</td>\n",
       "      <td>4.000</td>\n",
       "      <td>45.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           count          mean          std     min      25%  \\\n",
       "match_year             1069802.0   2014.947523     2.354282  2011.0   2013.0   \n",
       "match_num              1069802.0   1608.739153   500.498824  1101.0   1161.0   \n",
       "match_winner                 0.0           NaN          NaN     NaN      NaN   \n",
       "set_number             1130752.0      2.130221     1.068414     1.0      1.0   \n",
       "p1_games_won           1130752.0      2.383853     1.856530     0.0      1.0   \n",
       "p2_games_won           1130752.0      2.381237     1.857035     0.0      1.0   \n",
       "set_winner                   0.0           NaN          NaN     NaN      NaN   \n",
       "game_number            1130752.0      5.608546     3.321704     1.0      3.0   \n",
       "game_winner                  0.0           NaN          NaN     NaN      NaN   \n",
       "point_number           1129188.0    103.765098    73.273633     0.0     45.0   \n",
       "point_winner                 0.0           NaN          NaN     NaN      NaN   \n",
       "point_server                 0.0           NaN          NaN     NaN      NaN   \n",
       "serve_speed_kmh        1130752.0    125.225403    71.595218     0.0    119.0   \n",
       "rally                   114538.0      4.093227     3.943212     0.0      1.0   \n",
       "p1_momentum             548467.0     71.742976    60.940486     0.0     23.0   \n",
       "p2_momentum             548467.0     71.705244    59.728515     0.0     24.0   \n",
       "p1_points_won          1130752.0     51.774132    37.096992     0.0     22.0   \n",
       "p2_points_won          1130752.0     51.732302    36.992075     0.0     22.0   \n",
       "p1_ace                 1131390.0      0.034084     0.181444     0.0      0.0   \n",
       "p2_ace                 1131390.0      0.032703     0.177859     0.0      0.0   \n",
       "p1_shot_winner         1131390.0      0.162836     0.369216     0.0      0.0   \n",
       "p2_shot_winner         1131390.0      0.161864     0.368326     0.0      0.0   \n",
       "p1_double_fault        1131390.0      0.020207     0.140708     0.0      0.0   \n",
       "p2_double_fault        1131390.0      0.020371     0.141264     0.0      0.0   \n",
       "p1_unforced_error      1131390.0      0.162710     0.369101     0.0      0.0   \n",
       "p2_unforced_error      1131390.0      0.162761     0.369148     0.0      0.0   \n",
       "p1_net_point           1131392.0      0.096029     0.294631     0.0      0.0   \n",
       "p2_net_point           1131392.0      0.094432     0.292429     0.0      0.0   \n",
       "p1_net_point_won       1131392.0      0.064120     0.244967     0.0      0.0   \n",
       "p2_net_point_won       1131392.0      0.063929     0.244627     0.0      0.0   \n",
       "p1_break_point         1131392.0      0.046990     0.211617     0.0      0.0   \n",
       "p2_break_point         1131392.0      0.046722     0.211043     0.0      0.0   \n",
       "p1_break_point_won     1131392.0      0.019797     0.139302     0.0      0.0   \n",
       "p2_break_point_won     1131392.0      0.019547     0.138436     0.0      0.0   \n",
       "p1_first_serve_in       114538.0      0.308107     0.461713     0.0      0.0   \n",
       "p2_first_serve_in       114538.0      0.306195     0.460914     0.0      0.0   \n",
       "p1_first_serve_won      114538.0      0.207887     0.405798     0.0      0.0   \n",
       "p2_first_serve_won      114538.0      0.209511     0.406962     0.0      0.0   \n",
       "p1_second_serve_in      114538.0      0.172205     0.377560     0.0      0.0   \n",
       "p2_second_serve_in      114538.0      0.169105     0.374847     0.0      0.0   \n",
       "p1_second_serve_won     114538.0      0.091612     0.288478     0.0      0.0   \n",
       "p2_second_serve_won     114538.0      0.091018     0.287636     0.0      0.0   \n",
       "p1_forced_error         114538.0      0.171725     0.377143     0.0      0.0   \n",
       "p2_forced_error         114538.0      0.170983     0.376495     0.0      0.0   \n",
       "history                1125542.0  16756.580256  5100.075203     0.0  12010.0   \n",
       "speed_mph              1130752.0     77.787342    44.480158     0.0     74.0   \n",
       "p1_break_point_missed  1131392.0      0.044887     0.207056     0.0      0.0   \n",
       "p2_break_point_missed  1131392.0      0.044536     0.206283     0.0      0.0   \n",
       "serve_indicator        1131392.0      1.492525     0.510201     0.0      1.0   \n",
       "serve_direction          83016.0      1.877036     0.887700     0.0      1.0   \n",
       "winner_fh                83016.0      0.163523     0.369844     0.0      0.0   \n",
       "winner_bh                83016.0      0.082370     0.274929     0.0      0.0   \n",
       "serve_number            751020.0      1.289863     0.549916     0.0      1.0   \n",
       "p1_distance_run         587620.0      8.201076    15.282920     0.0      0.0   \n",
       "p2_distance_run         587620.0      8.225362    15.362344     0.0      0.0   \n",
       "rallycount              430839.0      3.283946     3.312369     0.0      1.0   \n",
       "\n",
       "                             50%        75%        max  \n",
       "match_year              2015.000   2017.000   2019.000  \n",
       "match_num               1311.000   2152.000   2701.000  \n",
       "match_winner                 NaN        NaN        NaN  \n",
       "set_number                 2.000      3.000      5.000  \n",
       "p1_games_won               2.000      4.000     26.000  \n",
       "p2_games_won               2.000      4.000     24.000  \n",
       "set_winner                   NaN        NaN        NaN  \n",
       "game_number                5.000      8.000     50.000  \n",
       "game_winner                  NaN        NaN        NaN  \n",
       "point_number              91.000    149.000    569.000  \n",
       "point_winner                 NaN        NaN        NaN  \n",
       "point_server                 NaN        NaN        NaN  \n",
       "serve_speed_kmh          151.000    175.000    244.000  \n",
       "rally                      3.000      6.000     47.000  \n",
       "p1_momentum               57.000    105.000    647.000  \n",
       "p2_momentum               58.000    105.000    552.000  \n",
       "p1_points_won             45.000     75.000    298.000  \n",
       "p2_points_won             45.000     74.000    271.000  \n",
       "p1_ace                     0.000      0.000      1.000  \n",
       "p2_ace                     0.000      0.000      1.000  \n",
       "p1_shot_winner             0.000      0.000      1.000  \n",
       "p2_shot_winner             0.000      0.000      1.000  \n",
       "p1_double_fault            0.000      0.000      1.000  \n",
       "p2_double_fault            0.000      0.000      1.000  \n",
       "p1_unforced_error          0.000      0.000      1.000  \n",
       "p2_unforced_error          0.000      0.000      1.000  \n",
       "p1_net_point               0.000      0.000      1.000  \n",
       "p2_net_point               0.000      0.000      1.000  \n",
       "p1_net_point_won           0.000      0.000      1.000  \n",
       "p2_net_point_won           0.000      0.000      1.000  \n",
       "p1_break_point             0.000      0.000      1.000  \n",
       "p2_break_point             0.000      0.000      1.000  \n",
       "p1_break_point_won         0.000      0.000      1.000  \n",
       "p2_break_point_won         0.000      0.000      1.000  \n",
       "p1_first_serve_in          0.000      1.000      1.000  \n",
       "p2_first_serve_in          0.000      1.000      1.000  \n",
       "p1_first_serve_won         0.000      0.000      1.000  \n",
       "p2_first_serve_won         0.000      0.000      1.000  \n",
       "p1_second_serve_in         0.000      0.000      1.000  \n",
       "p2_second_serve_in         0.000      0.000      1.000  \n",
       "p1_second_serve_won        0.000      0.000      1.000  \n",
       "p2_second_serve_won        0.000      0.000      1.000  \n",
       "p1_forced_error            0.000      0.000      1.000  \n",
       "p2_forced_error            0.000      0.000      1.000  \n",
       "history                15001.000  21530.000  26004.000  \n",
       "speed_mph                 94.000    108.000    152.000  \n",
       "p1_break_point_missed      0.000      0.000      1.000  \n",
       "p2_break_point_missed      0.000      0.000      1.000  \n",
       "serve_indicator            1.000      2.000      2.000  \n",
       "serve_direction            2.000      3.000      3.000  \n",
       "winner_fh                  0.000      0.000      1.000  \n",
       "winner_bh                  0.000      0.000      1.000  \n",
       "serve_number               1.000      2.000      2.000  \n",
       "p1_distance_run            1.859     10.546    318.110  \n",
       "p2_distance_run            1.878     10.582    445.469  \n",
       "rallycount                 2.000      4.000     45.000  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe().transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Crearing a function that I will use to create a new column in the dataframe Gender\n",
    "def gender(row):\n",
    "    if row == 'event_WS':\n",
    "        return 'F'\n",
    "    elif row == 'event_MS':\n",
    "        return 'M'\n",
    "    else:\n",
    "        return np.nan\n",
    "\n",
    "# Creating new column Gender using the function above\n",
    "df['players_gender'] = df['event_type'].apply(gender)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.3 Combining Player 1 and Player 2 Values for Different Shots\n",
    "<a id='combining_p1+p2'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    764030\n",
       "1    367362\n",
       "Name: shot_winner, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Combining the Shot Winner column for player 1 and player 2 and creating a new column named shot_winner, that\n",
    "# has a value of 1 if a shot was a winner, and 0 if a shot was not a winner\n",
    "df['shot_winner'] = df.apply(lambda x: 1 if (x.p1_shot_winner == 1) | (x.p2_shot_winner == 1) \n",
    "                                               else 0, axis=1)\n",
    "df['shot_winner'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>players_gender</th>\n",
       "      <th>Aces</th>\n",
       "      <th>pct_aces</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>F</td>\n",
       "      <td>12772.0</td>\n",
       "      <td>0.039918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M</td>\n",
       "      <td>48096.0</td>\n",
       "      <td>0.084283</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  players_gender     Aces  pct_aces\n",
       "0              F  12772.0  0.039918\n",
       "1              M  48096.0  0.084283"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# One thing I have interest in is looking at the total counts, as well as averages, and medians for ace totals,\n",
    "# forehand winner totals, backhand winner totals, forced errors and unforced errors for men vs. women matches\n",
    "\n",
    "# Grouping by gender\n",
    "gender_groupby = df.groupby('players_gender')\n",
    "\n",
    "# Getting aces per gender by adding p1_ace and p2_ace after groupby gender and summing aces\n",
    "aces_by_gender = (gender_groupby.p1_ace.sum() + gender_groupby.p2_ace.sum()).reset_index()\n",
    "aces_by_gender.rename(columns={0: 'Aces'}, inplace=True)\n",
    "\n",
    "pct_aces_per_point = []\n",
    "\n",
    "# Calculating the percentage of aces per point for Men vs. Women matches using a for loop\n",
    "for i in range(2):\n",
    "    pct_aces_per_point.append(aces_by_gender['Aces'][i] / gender_groupby.size()[i])\n",
    "\n",
    "aces_by_gender['pct_aces'] = pct_aces_per_point\n",
    "aces_by_gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grouping fh_winners and by gender, by first creating a list of the column names and looping through this list\n",
    "\n",
    "winners_columns = ['winner_fh', 'winner_bh']\n",
    "\n",
    "pct_fh_winner_per_point = []\n",
    "pct_bh_winner_per_point = []\n",
    "\n",
    "for column in winners_columns:\n",
    "     \n",
    "        column_by_gender = gender_groupby[column].sum().reset_index()\n",
    "        column_by_gender.rename(columns={0: 'Total ' + column}, inplace=True)\n",
    "        \n",
    "        if column == 'winner_fh':\n",
    "            for i in range(2):\n",
    "                pct_fh_winner_per_point.append(column_by_gender[column][i] / gender_groupby.size()[i])\n",
    "                                        \n",
    "        elif column == 'winner_bh':\n",
    "            for i in range(2):\n",
    "                pct_bh_winner_per_point.append(column_by_gender[column][i] / gender_groupby.size()[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>players_gender</th>\n",
       "      <th>Unforced Errors</th>\n",
       "      <th>pct_unforced_error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>F</td>\n",
       "      <td>114448.0</td>\n",
       "      <td>0.357704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M</td>\n",
       "      <td>170568.0</td>\n",
       "      <td>0.298901</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  players_gender  Unforced Errors  pct_unforced_error\n",
       "0              F         114448.0            0.357704\n",
       "1              M         170568.0            0.298901"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting foreced errors per gender\n",
    "forced_error_by_gender = (gender_groupby.p1_forced_error.sum() + gender_groupby.p2_forced_error.sum()).reset_index()\n",
    "forced_error_by_gender.rename(columns={0: 'Forced Errors'}, inplace=True)\n",
    "\n",
    "pct_forced_error_per_point = []\n",
    "\n",
    "# Calculating the percentage of forced errors per point for Men vs. Women matches using a for loop\n",
    "for i in range(2):\n",
    "    pct_forced_error_per_point.append(forced_error_by_gender['Forced Errors'][i] / gender_groupby.size()[i])  \n",
    "\n",
    "forced_error_by_gender['pct_forced_error'] = pct_forced_error_per_point\n",
    "    \n",
    "\n",
    "# Getting unforeced errors per gender\n",
    "unforced_error_by_gender = (gender_groupby.p1_unforced_error.sum() + \n",
    "                          gender_groupby.p2_unforced_error.sum()).reset_index()\n",
    "unforced_error_by_gender.rename(columns={0: 'Unforced Errors'}, inplace=True)\n",
    "\n",
    "pct_unforced_error_per_point = []\n",
    "\n",
    "# Calculating the percentage of unforced errors per point for Men vs. Women matches using a for loop\n",
    "for i in range(2):\n",
    "    pct_unforced_error_per_point.append(unforced_error_by_gender['Unforced Errors'][i] / gender_groupby.size()[i])  \n",
    "    \n",
    "unforced_error_by_gender['pct_unforced_error'] = pct_unforced_error_per_point\n",
    "unforced_error_by_gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merging the dataframes created above together\n",
    "mvw = pd.merge(pd.merge(aces_by_gender, forced_error_by_gender), unforced_error_by_gender).merge(column_by_gender)\n",
    "mvw['pct_bh_winners'] = pct_bh_winner_per_point\n",
    "mvw = mvw.merge(gender_groupby['winner_fh'].sum().reset_index())\n",
    "mvw['pct_fh_winners'] = pct_fh_winner_per_point\n",
    "mvw = mvw.set_index('players_gender')\n",
    "\n",
    "# Creating a new dataframe with just the percents for each category\n",
    "mvw_pct = mvw[['pct_aces', 'pct_forced_error', 'pct_unforced_error', 'pct_bh_winners', 'pct_fh_winners']]\n",
    "\n",
    "mvw.drop(['pct_aces', 'pct_forced_error', 'pct_unforced_error', 'pct_bh_winners', 'pct_fh_winners'], axis=1,\n",
    "        inplace=True)\n",
    "\n",
    "mvw_pct = mvw_pct.transpose()\n",
    "mvw = mvw.transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a new figure to plot the totals for aces, fh_winners, bh_winners, unforced errors, and forced errors for \n",
    "# men vs. women, and also plotting the average totals for each of the above for men vs. women too\n",
    "plt.figure(figsize=(20, 8))\n",
    "ax = plt.subplot(1, 2, 1)\n",
    "\n",
    "# Creating the variables that will allow me to plot the bars for men and women in each graph side by side\n",
    "n = 1\n",
    "t = 2\n",
    "d = len(mvw.index)\n",
    "w = 0.8\n",
    "# Using the variables above to create the x_values\n",
    "x_values = [t*element + w*n for element in range(d)]\n",
    "\n",
    "plt.bar(x_values, mvw['F'], label='Women Matches')\n",
    "\n",
    "n = 2\n",
    "t = 2\n",
    "d = len(mvw.index)\n",
    "w = 0.8\n",
    "# Using the variables above to create the x_values\n",
    "x_values_2 = [t*element + w*n for element in range(d)]\n",
    "\n",
    "plt.bar(x_values_2, mvw['M'], label='Men Matches')\n",
    "ax.set_xticks(x_values)\n",
    "ax.set_xticklabels(mvw.index, rotation=45)\n",
    "plt.xlabel('Shot_Type')\n",
    "plt.ylabel('Total Count')\n",
    "plt.title('Total Shot Type Counts for Men vs. Women Matches')\n",
    "\n",
    "plt.legend()\n",
    "\n",
    "ax_2 = plt.subplot(1, 2, 2)\n",
    "\n",
    "n = 1\n",
    "t = 2\n",
    "d = len(mvw_pct.index)\n",
    "w = 0.8\n",
    "# Using the variables above to create the x_values\n",
    "x_values = [t*element + w*n for element in range(d)]\n",
    "\n",
    "plt.bar(x_values, mvw_pct['F'], label='Women Matches')\n",
    "\n",
    "n = 2\n",
    "t = 2\n",
    "d = len(mvw_pct.index)\n",
    "w = 0.8\n",
    "# Using the variables above to create the x_values\n",
    "x_values_2 = [t*element + w*n for element in range(d)]\n",
    "\n",
    "plt.bar(x_values_2, mvw_pct['M'], label='Men Matches')\n",
    "ax_2.set_xticks(x_values)\n",
    "ax_2.set_xticklabels(mvw_pct.index, rotation=45)\n",
    "plt.xlabel('Shot Type')\n",
    "plt.ylabel('Percentage Amount')\n",
    "plt.title('Total Percentage for Shot Type for Men vs. Women Matches')\n",
    "\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What's interesting in looking at the graphs above is that women on average have a lot more unforced errors then men, but also have slightly more forehand and backhand winners then men. How could this be? Men are known for hitting the ball bigger, and going for more, while Women are known for being very consistent.\n",
    "\n",
    "\n",
    "I think the amount of aces Men hit could be an indicator as to why it seems that they hit less forehand and backhand winners. Since so many of their points are free points off of their serve, it's possible that they have less opportunities to hit winners on their groundstrokes out of all the points they play. It's possible that Women have higher unforced errors since they seem to go for it on their ground strokes, and they may have longer rallies which could cause a tired player to miss an otherwise easy shot. I'm going to look at rally length further."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x11b8adeb0>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 864x504 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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4zPPbVO6yvQxAABIJkJhhLzAyLEtOdWSfDen0fVAL1VQqlrbaEIoBAAACUMojFAjFPpDClJt0qhY6LkFOUFFWZVZUwgAABKHUBghvx4KvaICJydjRofCNklSlwZZUwgAABKnqVD49NNPxz2O48JIKKxNH48OhamCJKnLGlCV6WMAAJAwTYXCL3zhC3rXu96lf/3Xf1V/f3/cY5q3vMDIsSy5XlGBm5fM2OljSVpkF1Vm+hgAACRMU6Hwb//2b3XXXXfJsix95CMf0caNG/XII4/EPbZ5xw+MXNuW45UUuLkxn42EwkEqhQAAtMCb3/xmlcvlVg8jMps3b9b1118f2fc1vabw0KFD2rNnj3p6etTV1aVvf/vbuu666yIbyPHAN0aOrYlDYSpcU7jIZk0hAABIHreZi6666ipls1ldddVV+shHPqJ0Oi1Jet/73hfr4OYbzw/XFLpeUUOjjriTRiqFC61B7aNSCABArB544AFt2rRJxWJRPT09+tCHPtT4bNu2bbr11lvl+756enp00003qVQq6f7779dtt90mSbr66qv193//93rsscf0xS9+UbZt6/zzz9d1112n22+/XY8//rhKpZI++clP6jOf+YwGBwc1NDSkP/mTP9Gb3vSmCcc0PDysj370ozpw4ICWL1+uRx99VA8//LCee+45feITn5AkdXZ26pZbbtHPf/5z3XXXXUqlUtq1a5fe9ra36YMf/KC2b9+uj3/848rlcsrlclqwYIEk6Zvf/Oa041y1atWUz6ypUPiZz3xGp59++lHv33333c38+gnDN+GaQscrKXCyYz4zdkq+nVGXGaRPIQAAc2BoaEj33HOPjhw5oquuukq+70uSXnjhBX3sYx/TmWeeqa997Wt64IEH9Jd/+Zf6xCc+ob6+Ph04cEBdXV3KZDK6/fbb9Z//+Z/K5XL60z/9U23ZskWSdMYZZ+jP/uzP9Pzzz6u3t1ef//zndfjwYe3YsWPS8dx333065ZRTdNttt2n79u16+9vfLkn68z//c91yyy1avXq1vvKVr+jzn/+83vCGN2jPnj168MEHValUdNFFF+mDH/ygPv3pT+uaa67RG9/4Rn3uc5/Tiy++qN7e3mnH2YwpQ+H69etlWdaY94wxsixLX/7yl5u6wYnED4xcy8j1SvKd3FGfe6mCuqoD8giFAADE7ld+5Vdk27a6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\n",
      "text/plain": [
       "<Figure size 653.25x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Gathering all the non-null rallies\n",
    "rallies = df[df['rally'].notnull()]\n",
    "\n",
    "sns.set_style('darkgrid')\n",
    "plt.figure(figsize=(12, 7))\n",
    "\n",
    "# Creating a pairplot of rally and gender, with gender as a hue to look at a histogram of rally length frequency\n",
    "# for Men's vs. Women's matches\n",
    "sns.pairplot(rallies[['rally', 'players_gender']], \n",
    "             hue='players_gender', kind='hist', aspect=1, height=8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It would be interesting to see how longer rallies usually end for Men and Women. I'm going to analyze the 90th percentile of rally length and see if there's a trend as to how longer rallies usually end for each gender."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['unforced_error'] = df.apply(lambda x: 1 if (x.p1_unforced_error == 1) | \n",
    "                                                  (x.p2_unforced_error == 1) else 0, axis=1)\n",
    "\n",
    "df['forced_error'] = df.apply(lambda x: 1 if (x.p1_forced_error == 1) | \n",
    "                                                  (x.p2_forced_error == 1) else 0, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.0"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting the value for which 90 percent of rallies are shorter than, and storing it in the variable rally_q_90\n",
    "rally_q_90 = np.percentile(df[df['rally'].notnull()]['rally'], 90)\n",
    "rally_q_90"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rally</th>\n",
       "      <th>winner_fh</th>\n",
       "      <th>winner_bh</th>\n",
       "      <th>unforced_error</th>\n",
       "      <th>forced_error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10.0</td>\n",
       "      <td>0.196954</td>\n",
       "      <td>0.123858</td>\n",
       "      <td>0.349239</td>\n",
       "      <td>0.329949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11.0</td>\n",
       "      <td>0.211137</td>\n",
       "      <td>0.100928</td>\n",
       "      <td>0.344548</td>\n",
       "      <td>0.343387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12.0</td>\n",
       "      <td>0.191153</td>\n",
       "      <td>0.139021</td>\n",
       "      <td>0.317536</td>\n",
       "      <td>0.352291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13.0</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.108163</td>\n",
       "      <td>0.355102</td>\n",
       "      <td>0.336735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14.0</td>\n",
       "      <td>0.212346</td>\n",
       "      <td>0.118519</td>\n",
       "      <td>0.311111</td>\n",
       "      <td>0.358025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>15.0</td>\n",
       "      <td>0.242525</td>\n",
       "      <td>0.112957</td>\n",
       "      <td>0.325581</td>\n",
       "      <td>0.315615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>16.0</td>\n",
       "      <td>0.221757</td>\n",
       "      <td>0.138075</td>\n",
       "      <td>0.301255</td>\n",
       "      <td>0.338912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>17.0</td>\n",
       "      <td>0.224852</td>\n",
       "      <td>0.136095</td>\n",
       "      <td>0.319527</td>\n",
       "      <td>0.319527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>18.0</td>\n",
       "      <td>0.273292</td>\n",
       "      <td>0.155280</td>\n",
       "      <td>0.273292</td>\n",
       "      <td>0.298137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>19.0</td>\n",
       "      <td>0.177570</td>\n",
       "      <td>0.158879</td>\n",
       "      <td>0.364486</td>\n",
       "      <td>0.299065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>20.0</td>\n",
       "      <td>0.265060</td>\n",
       "      <td>0.204819</td>\n",
       "      <td>0.349398</td>\n",
       "      <td>0.180723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>21.0</td>\n",
       "      <td>0.173333</td>\n",
       "      <td>0.226667</td>\n",
       "      <td>0.253333</td>\n",
       "      <td>0.346667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>22.0</td>\n",
       "      <td>0.169811</td>\n",
       "      <td>0.094340</td>\n",
       "      <td>0.283019</td>\n",
       "      <td>0.452830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>23.0</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>0.153846</td>\n",
       "      <td>0.282051</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>24.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>0.303030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>25.0</td>\n",
       "      <td>0.238095</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.238095</td>\n",
       "      <td>0.380952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>26.0</td>\n",
       "      <td>0.411765</td>\n",
       "      <td>0.176471</td>\n",
       "      <td>0.176471</td>\n",
       "      <td>0.235294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>27.0</td>\n",
       "      <td>0.150000</td>\n",
       "      <td>0.150000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.450000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>28.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.444444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>29.0</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>0.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>30.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>31.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.083333</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>32.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>33.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>34.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>36.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>37.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>38.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>41.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>43.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    rally  winner_fh  winner_bh  unforced_error  forced_error\n",
       "0    10.0   0.196954   0.123858        0.349239      0.329949\n",
       "1    11.0   0.211137   0.100928        0.344548      0.343387\n",
       "2    12.0   0.191153   0.139021        0.317536      0.352291\n",
       "3    13.0   0.200000   0.108163        0.355102      0.336735\n",
       "4    14.0   0.212346   0.118519        0.311111      0.358025\n",
       "5    15.0   0.242525   0.112957        0.325581      0.315615\n",
       "6    16.0   0.221757   0.138075        0.301255      0.338912\n",
       "7    17.0   0.224852   0.136095        0.319527      0.319527\n",
       "8    18.0   0.273292   0.155280        0.273292      0.298137\n",
       "9    19.0   0.177570   0.158879        0.364486      0.299065\n",
       "10   20.0   0.265060   0.204819        0.349398      0.180723\n",
       "11   21.0   0.173333   0.226667        0.253333      0.346667\n",
       "12   22.0   0.169811   0.094340        0.283019      0.452830\n",
       "13   23.0   0.230769   0.153846        0.282051      0.333333\n",
       "14   24.0   0.333333   0.090909        0.272727      0.303030\n",
       "15   25.0   0.238095   0.142857        0.238095      0.380952\n",
       "16   26.0   0.411765   0.176471        0.176471      0.235294\n",
       "17   27.0   0.150000   0.150000        0.250000      0.450000\n",
       "18   28.0   0.000000   0.333333        0.222222      0.444444\n",
       "19   29.0   0.428571   0.000000        0.285714      0.285714\n",
       "20   30.0   0.333333   0.333333        0.000000      0.333333\n",
       "21   31.0   0.333333   0.083333        0.333333      0.250000\n",
       "22   32.0   1.000000   0.000000        0.000000      0.000000\n",
       "23   33.0   0.000000   0.000000        0.333333      0.666667\n",
       "24   34.0   1.000000   0.000000        0.000000      0.000000\n",
       "25   36.0   0.000000   0.000000        0.000000      1.000000\n",
       "26   37.0   0.000000   0.000000        0.000000      1.000000\n",
       "27   38.0   0.000000   0.000000        0.500000      0.500000\n",
       "28   41.0   0.000000   0.000000        1.000000      0.000000\n",
       "29   43.0   0.000000   0.000000        0.000000      1.000000"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "men_long_rallies = df[(df['rally'] > rally_q_90) & (df['players_gender'] == 'M')]\n",
    "\n",
    "women_long_rallies = df[(df['rally'] > rally_q_90) & (df['players_gender'] == 'F')]\n",
    "\n",
    "men_long_rallies = men_long_rallies.groupby('rally')['winner_fh', 'winner_bh', 'unforced_error', \n",
    "                                            'forced_error'].mean().reset_index()\n",
    "\n",
    "women_long_rallies = women_long_rallies.groupby('rally')['winner_fh', 'winner_bh', 'unforced_error', \n",
    "                                            'forced_error'].mean().reset_index()\n",
    "\n",
    "men_long_rallies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rally</th>\n",
       "      <th>winner_fh</th>\n",
       "      <th>winner_bh</th>\n",
       "      <th>unforced_error</th>\n",
       "      <th>forced_error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10.0</td>\n",
       "      <td>0.251135</td>\n",
       "      <td>0.131619</td>\n",
       "      <td>0.296520</td>\n",
       "      <td>0.320726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11.0</td>\n",
       "      <td>0.232143</td>\n",
       "      <td>0.146825</td>\n",
       "      <td>0.265873</td>\n",
       "      <td>0.355159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12.0</td>\n",
       "      <td>0.228288</td>\n",
       "      <td>0.148883</td>\n",
       "      <td>0.367246</td>\n",
       "      <td>0.255583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13.0</td>\n",
       "      <td>0.222603</td>\n",
       "      <td>0.123288</td>\n",
       "      <td>0.311644</td>\n",
       "      <td>0.342466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14.0</td>\n",
       "      <td>0.256158</td>\n",
       "      <td>0.118227</td>\n",
       "      <td>0.334975</td>\n",
       "      <td>0.290640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>15.0</td>\n",
       "      <td>0.213415</td>\n",
       "      <td>0.164634</td>\n",
       "      <td>0.310976</td>\n",
       "      <td>0.310976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>16.0</td>\n",
       "      <td>0.298507</td>\n",
       "      <td>0.149254</td>\n",
       "      <td>0.276119</td>\n",
       "      <td>0.276119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>17.0</td>\n",
       "      <td>0.263736</td>\n",
       "      <td>0.098901</td>\n",
       "      <td>0.351648</td>\n",
       "      <td>0.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>18.0</td>\n",
       "      <td>0.253731</td>\n",
       "      <td>0.223881</td>\n",
       "      <td>0.194030</td>\n",
       "      <td>0.328358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>19.0</td>\n",
       "      <td>0.302326</td>\n",
       "      <td>0.186047</td>\n",
       "      <td>0.232558</td>\n",
       "      <td>0.255814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>20.0</td>\n",
       "      <td>0.209302</td>\n",
       "      <td>0.162791</td>\n",
       "      <td>0.302326</td>\n",
       "      <td>0.325581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>21.0</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>0.121212</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>22.0</td>\n",
       "      <td>0.454545</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.181818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>23.0</td>\n",
       "      <td>0.312500</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>0.187500</td>\n",
       "      <td>0.375000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>24.0</td>\n",
       "      <td>0.357143</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.071429</td>\n",
       "      <td>0.428571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>25.0</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>26.0</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>0.375000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>27.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>28.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>29.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>30.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>31.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>32.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>33.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>47.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    rally  winner_fh  winner_bh  unforced_error  forced_error\n",
       "0    10.0   0.251135   0.131619        0.296520      0.320726\n",
       "1    11.0   0.232143   0.146825        0.265873      0.355159\n",
       "2    12.0   0.228288   0.148883        0.367246      0.255583\n",
       "3    13.0   0.222603   0.123288        0.311644      0.342466\n",
       "4    14.0   0.256158   0.118227        0.334975      0.290640\n",
       "5    15.0   0.213415   0.164634        0.310976      0.310976\n",
       "6    16.0   0.298507   0.149254        0.276119      0.276119\n",
       "7    17.0   0.263736   0.098901        0.351648      0.285714\n",
       "8    18.0   0.253731   0.223881        0.194030      0.328358\n",
       "9    19.0   0.302326   0.186047        0.232558      0.255814\n",
       "10   20.0   0.209302   0.162791        0.302326      0.325581\n",
       "11   21.0   0.272727   0.121212        0.272727      0.333333\n",
       "12   22.0   0.454545   0.272727        0.090909      0.181818\n",
       "13   23.0   0.312500   0.125000        0.187500      0.375000\n",
       "14   24.0   0.357143   0.142857        0.071429      0.428571\n",
       "15   25.0   0.428571   0.142857        0.142857      0.285714\n",
       "16   26.0   0.250000   0.250000        0.125000      0.375000\n",
       "17   27.0   0.000000   0.200000        0.400000      0.400000\n",
       "18   28.0   0.000000   0.000000        0.666667      0.333333\n",
       "19   29.0   0.500000   0.000000        0.250000      0.250000\n",
       "20   30.0   0.000000   0.000000        0.000000      1.000000\n",
       "21   31.0   0.000000   0.000000        1.000000      0.000000\n",
       "22   32.0   0.000000   1.000000        0.000000      0.000000\n",
       "23   33.0   0.000000   0.000000        0.000000      1.000000\n",
       "24   47.0   0.000000   0.000000        1.000000      0.000000"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "women_long_rallies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(women_long_rallies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1080 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "men_rally_melt=pd.melt(men_long_rallies, id_vars='rally', value_vars=men_long_rallies.columns[1:], value_name='Average',\n",
    "            var_name='point_end_type')\n",
    "\n",
    "plt.figure(figsize=(20, 15))\n",
    "ax = plt.subplot(211)\n",
    "sns.barplot(x='rally', y='Average', data=men_rally_melt, hue='point_end_type')\n",
    "\n",
    "plt.title('Men Long Rallies End Point')\n",
    "plt.xlabel('Rally Length')\n",
    "plt.ylabel('Percentage')\n",
    "\n",
    "women_rally_melt=pd.melt(women_long_rallies, id_vars='rally', \n",
    "                         value_vars=women_long_rallies.columns[1:], value_name='Average', var_name='point_end_type')\n",
    "\n",
    "ax_2 = plt.subplot(212)\n",
    "sns.barplot(x='rally', y='Average', data=women_rally_melt, hue='point_end_type')\n",
    "\n",
    "plt.title('Women Long Rallies End Point')\n",
    "plt.xlabel('Rally Length')\n",
    "plt.ylabel('Percentage')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "men_rally_averages = {}\n",
    "\n",
    "for column in men_long_rallies.columns[1:]:\n",
    "    men_rally_averages[column] = men_long_rallies[column].sum() / len(men_long_rallies)\n",
    "    \n",
    "men_long_rally_averages = pd.DataFrame.from_dict(men_rally_averages, orient='index').rename(columns={0: 'Average'})\n",
    "\n",
    "women_rally_averages = {}\n",
    "\n",
    "for column in women_long_rallies.columns[1:]:\n",
    "    women_rally_averages[column] = women_long_rallies[column].sum() / len(women_long_rallies)\n",
    "    \n",
    "women_long_rally_averages = pd.DataFrame.from_dict(women_rally_averages, \n",
    "                                                   orient='index').rename(columns={0: 'Average'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20, 8))\n",
    "\n",
    "ax = plt.subplot(121)\n",
    "sns.barplot(x=men_long_rally_averages.index, y='Average', data=men_long_rally_averages)\n",
    "plt.title('Average point ender for Men Long Rallies')\n",
    "\n",
    "ax_2 = plt.subplot(122, sharey=ax)\n",
    "sns.barplot(x=women_long_rally_averages.index, y='Average', data=women_long_rally_averages)\n",
    "plt.title('Average point ender for Women Long Rallies')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the visualization above Men and Women rally lengths look almost identical, with the major difference being that the men have a much greater amount of points being between around 1-2 shots then women. Both distributions are right skewed, and indicate as anticipated that a majority of rallies are short. \n",
    "\n",
    "When looking at longer rallies, I see a lot of forced errors being the reason for the point coming to an end. I also see a lot of unforced errors being the reason for a long rally coming to an end. Forehand winners are occasionally the main culprit for ending a long rally, but backhand winners seem to very rarely be the cause for the end of the point for longer rallies.\n",
    "\n",
    "Men long rallies tend to end because of forced errors around 38% of the time, unforced errors around 26% of the time, forehand winners around 24% of the time, and backhand winners only around 11% of the time.\n",
    "\n",
    "Women long rallies tend to end because of forced errors around 33% of the time, unforced errors around 30% of the time, forehand winners around 21% of the time, and backhand winners around 16% of the time.\n",
    "\n",
    "What I conclude from this is if you're playing a Men's match and find yourself in a long rally, the best option is to try and move your opponent around as much as possible, but within a margin of safety in order to force them to make an error while on the run. If that doesn't work, then I would suggest playing to their backhand as often as possible, since they are less likely to hit a winner off that side, and there's a good chance that as the rally gets longer the chance of making an unforced error increases.\n",
    "\n",
    "If you're playing a Women's match and find yourself in a long rally, the best option is also to try and move your opponent around as much as possible, but within a margin of safety in order to force them to make an error while on the run. The next bext thing is to try and stay as consistent as possible as Women have a higher chance of hitting an unforced error the longer the point is.\n",
    "\n",
    "I'd like to look at the distribution of serve speeds for each men and women."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a new dataframe for Men's matches\n",
    "men_matches = df[df['players_gender'] == 'M']\n",
    "\n",
    "# Creating a new dataframe for Women's matches\n",
    "women_matches = df[df['players_gender'] == 'F']\n",
    "\n",
    "# Calculating the mean and median of serve speed for Men matches\n",
    "men_serve_mean = men_matches[men_matches['serve_speed_kmh'] > 0]['serve_speed_kmh'].mean()\n",
    "\n",
    "men_serve_median = men_matches[men_matches['serve_speed_kmh'] > 0]['serve_speed_kmh'].median()\n",
    "\n",
    "# Calculating the mean and median of serve speed for Women matches\n",
    "women_serve_mean = women_matches[women_matches['serve_speed_kmh'] > 0]['serve_speed_kmh'].mean()\n",
    "\n",
    "women_serve_median = women_matches[women_matches['serve_speed_kmh'] > 0]['serve_speed_kmh'].median()\n",
    "\n",
    "\n",
    "plt.figure(figsize=(20, 8))\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "sns.distplot(men_matches[(men_matches['serve_speed_kmh'].notnull()) & (men_matches['serve_speed_kmh']\n",
    "                                                                      > 0)]['serve_speed_kmh'])\n",
    "\n",
    "# Plotting the Mean and Median lines for men serve speed on distribution plot\n",
    "plt.axvline(men_serve_mean, color='r')\n",
    "plt.axvline(men_serve_median, color='g', linestyle='--')\n",
    "plt.title('Distribution of Men Serve Speed')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(20, 8))\n",
    "plt.subplot(2, 1, 2)\n",
    "sns.distplot(women_matches[(women_matches['serve_speed_kmh'].notnull()) & \n",
    "                          (women_matches['serve_speed_kmh'] > 0)]['serve_speed_kmh'], color='red')\n",
    "\n",
    "# Plotting the Mean and Median lines for women serve speed on distribution plot\n",
    "plt.axvline(women_serve_mean, color='r')\n",
    "plt.axvline(women_serve_median, color='g', linestyle='--')\n",
    "plt.title('Distribution of Women Serve Speed')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Break this up on first vs. second serve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.08887217095779716"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "men_serve_std = men_matches[(men_matches['serve_speed_kmh'].notnull()) & \n",
    "                              (men_matches['serve_speed_kmh'] > 0)]['serve_speed_kmh'].std()\n",
    "\n",
    "women_serve_std = women_matches[(women_matches['serve_speed_kmh'].notnull()) & \n",
    "                                (women_matches['serve_speed_kmh'] > 0)]['serve_speed_kmh'].std()\n",
    "\n",
    "len(men_matches[(men_matches['serve_speed_kmh'].notnull()) & \n",
    "           (men_matches['serve_speed_kmh'] >= 200)]['serve_speed_kmh']\n",
    "   ) / len(men_matches[men_matches['serve_speed_kmh'].notnull()])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On average Men are serving about 20 kmh faster than women. Both distributions for Men and Women serve speed are almost normal distributions, but are slightly left skewed with the mean being slightly less than the median. About 8% of men's serves are 200 kmh or higher, while there isn't a single women's serve that reaches that speed. The range of Men's serve speeds are also higher then that of Women serve speeds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Men's first serve percentage: 60.98\n",
      "Women's first serve percentage: 61.87\n"
     ]
    }
   ],
   "source": [
    "# Adding the total first serves registered as being in play for all men matches\n",
    "men_first_serve_in_total = men_matches.p1_first_serve_in.value_counts()[1] + \\\n",
    "men_matches.p2_first_serve_in.value_counts()[1]\n",
    "\n",
    "# Creating a variable with the total first serves made by men\n",
    "men_first_serves = len(men_matches[(men_matches['p1_first_serve_in'].notnull()) | \n",
    "                              (men_matches['p2_first_serve_in'].notnull())])\n",
    "\n",
    "# Calculating men's first serve percentage\n",
    "men_first_serve_pct = round(men_first_serve_in_total / men_first_serves * 100, 2)\n",
    "\n",
    "# Adding the total first serves registered as being in play for all women matches\n",
    "women_first_serve_in_total = women_matches['p1_first_serve_in'].value_counts()[1] + \\\n",
    "women_matches['p2_first_serve_in'].value_counts()[1]\n",
    "\n",
    "# Creating a variable with the total first serves made by women\n",
    "women_first_serves = len(women_matches[(women_matches['p1_first_serve_in'].notnull()) |\n",
    "                                  (women_matches['p2_first_serve_in'].notnull())])\n",
    "\n",
    "# Calculating women's first serve percentage\n",
    "women_first_serve_pct = round(women_first_serve_in_total / women_first_serves * 100, 2)\n",
    "\n",
    "print(\"Men's first serve percentage: {}\".format(men_first_serve_pct))\n",
    "print(\"Women's first serve percentage: {}\".format(women_first_serve_pct))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of Men First Serve Points Won: 71.15\n",
      "Percentage of Women First Serve Points Won: 63.46\n"
     ]
    }
   ],
   "source": [
    "# Looking at first serve points won\n",
    "\n",
    "# Creating a variable to hold total first serve points won by men\n",
    "men_first_serve_points_won = men_matches['p1_first_serve_won'].value_counts()[1] + \\\n",
    "men_matches['p2_first_serve_won'].value_counts()[1]\n",
    "\n",
    "# Creating a variable for percentage of Men's first serve points won\n",
    "pct_men_first_serve_won = round(men_first_serve_points_won / men_first_serve_in_total * 100, 2)\n",
    "\n",
    "# Creating a variable to hold total first serve points won by women\n",
    "women_first_serve_points_won = women_matches['p1_first_serve_won'].value_counts()[1] + \\\n",
    "women_matches['p2_first_serve_won'].value_counts()[1]\n",
    "\n",
    "# Creating a variable for percentage of Men's first serve points won\n",
    "pct_women_first_serve_won = round(women_first_serve_points_won / women_first_serve_in_total * 100, 2)\n",
    "\n",
    "print('Percentage of Men First Serve Points Won: {}'.format(pct_men_first_serve_won))\n",
    "print('Percentage of Women First Serve Points Won: {}'.format(pct_women_first_serve_won))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Men's second serve Percentage: 90.45\n",
      "Women's second serve Percentage: 85.03\n"
     ]
    }
   ],
   "source": [
    "# Looking at Second Serve\n",
    "\n",
    "# Creating a variable for Men total second serves in\n",
    "men_second_serves_in = men_matches['p1_second_serve_in'].value_counts()[1] + \\\n",
    "men_matches['p2_second_serve_in'].value_counts()[1]\n",
    "\n",
    "# Creating a variable for Men total second serves\n",
    "men_total_second_serves = len(men_matches[(men_matches['p1_first_serve_in'] == 0) &\n",
    "                                          (men_matches['p2_first_serve_in'] == 0)])\n",
    "\n",
    "# Calculating the percentage of Second Serves that go in the court for Men\n",
    "pct_men_second_serves_in = round(men_second_serves_in / men_total_second_serves * 100, 2)\n",
    "\n",
    "# Creating a variable for Women total second serves in\n",
    "women_second_serves_in = women_matches['p1_second_serve_in'].value_counts()[1] + \\\n",
    "women_matches['p2_second_serve_in'].value_counts()[1]\n",
    "\n",
    "# Creating a variable for Women total second serves\n",
    "women_total_second_serves = len(women_matches[(women_matches['p1_first_serve_in'] == 0) &\n",
    "                                             (women_matches['p2_first_serve_in'] == 0)])\n",
    "\n",
    "# Calculating the percentage of Second Serves that go in the court for Women\n",
    "pct_women_second_serves_in = round(women_second_serves_in / women_total_second_serves * 100, 2)\n",
    "\n",
    "print('Men\\'s second serve Percentage: {}'.format(pct_men_second_serves_in))\n",
    "print('Women\\'s second serve Percentage: {}'.format(pct_women_second_serves_in))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of Men Second Serve Points Won: 49.97\n",
      "Percentage of Women Second Serve Points Won: 43.68\n"
     ]
    }
   ],
   "source": [
    "# Calculating the amount of second serve points won on average for Men\n",
    "men_ss_point_won = men_matches['p1_second_serve_won'].value_counts()[1] + \\\n",
    "men_matches['p2_second_serve_won'].value_counts()[1]\n",
    "\n",
    "pct_men_ss_point_won = round(men_ss_point_won / men_total_second_serves * 100, 2)\n",
    "\n",
    "# Calculating the amount of second serve points won on average for Women\n",
    "women_ss_point_won = women_matches['p1_second_serve_won'].value_counts()[1] + \\\n",
    "women_matches['p2_second_serve_won'].value_counts()[1]\n",
    "\n",
    "pct_women_ss_point_won = round(women_ss_point_won / women_total_second_serves * 100, 2)\n",
    "\n",
    "print('Percentage of Men Second Serve Points Won: {}'.format(pct_men_ss_point_won))\n",
    "print('Percentage of Women Second Serve Points Won: {}'.format(pct_women_ss_point_won))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting out the serving results above\n",
    "\n",
    "plt.figure(figsize=(15, 8))\n",
    "ax = plt.subplot()\n",
    "plt.bar(1, men_first_serve_pct, color='b')\n",
    "plt.bar(2, women_first_serve_pct, color='r')\n",
    "plt.bar(3, pct_men_first_serve_won, color='b')\n",
    "plt.bar(4, pct_women_first_serve_won, color='r')\n",
    "plt.bar(5, pct_men_second_serves_in, color='b')\n",
    "plt.bar(6, pct_women_second_serves_in, color='r')\n",
    "plt.bar(7, pct_men_ss_point_won, color='b')\n",
    "plt.bar(8, pct_women_ss_point_won, color='r')\n",
    "ax.set_xticks(range(1, 9))\n",
    "ax.set_xticklabels(['Men 1st Serve %', 'Women 1st Serve %', 'Men % 1st Serve Won',\n",
    "                   'Women % 1st Serve Won', 'Men 2nd Serve %', 'Women 2nd Serve %',\n",
    "                   'Men % 2nd Serve Won', 'Women % 2nd Serve Won'], rotation=30)\n",
    "plt.title('Men vs. Women Serving Percentages')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Men Percentage of Double Faults: 3.5\n",
      "Men Total Double Faults: 19985\n",
      "\n",
      "Women Percentage of Double Faults: 4.81\n",
      "Women Total Double Faults: 15386\n"
     ]
    }
   ],
   "source": [
    "# Looking at double faults\n",
    "\n",
    "men_total_double_faults = men_matches['p1_double_fault'].value_counts()[1] + \\\n",
    "men_matches['p2_double_fault'].value_counts()[1]\n",
    "\n",
    "women_total_double_faults = women_matches['p1_double_fault'].value_counts()[1] + \\\n",
    "women_matches['p2_double_fault'].value_counts()[1]\n",
    "\n",
    "men_total_points = len((men_matches['p1_first_serve_in'].notnull()) & (men_matches['p2_first_serve_in'].notnull()))\n",
    "\n",
    "women_total_points = len((women_matches['p1_first_serve_in'].notnull()) & \n",
    "                         (women_matches['p2_first_serve_in'].notnull()))\n",
    "\n",
    "men_pct_double_faults = round(men_total_double_faults / men_total_points * 100, 2)\n",
    "women_pct_double_faults = round(women_total_double_faults / women_total_points * 100, 2)\n",
    "\n",
    "print('Men Percentage of Double Faults: {}'.format(men_pct_double_faults))\n",
    "print('Men Total Double Faults: {}\\n'.format(men_total_double_faults))\n",
    "\n",
    "print('Women Percentage of Double Faults: {}'.format(women_pct_double_faults))\n",
    "print('Women Total Double Faults: {}'.format(women_total_double_faults))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Although Women have a higher first serve percentage, Men on average win more percentage of points on their first serve, have a higher second serve percentage, and  win more percentage of points on their second serve. Furthermore men have a lower percentage of double faults on average than Women, and a higher percentage of Aces. Although I haven't looked to see the signifigance of serve on winning yet, I am beginning to see a trend that Men's serves are superior to Women's serves, and may play a more important role for winning a Men's match, vs. a Women's match. What's a somehat shocking statistic, is that Men on average win only 49% of their second serve points. If you win more than half of your second serve points on average I believe you will have a greater of winning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 8))\n",
    "\n",
    "plt.subplot(2, 2, 1)\n",
    "sns.countplot(x='serve_width', data=men_matches.sort_values('serve_width'))\n",
    "plt.title('Men Serve Width')\n",
    "\n",
    "plt.subplot(2, 2, 2)\n",
    "sns.countplot(x='serve_width', data=women_matches.sort_values('serve_width'))\n",
    "plt.title('Women Serve Width')\n",
    "\n",
    "plt.subplots_adjust(hspace=0.4)\n",
    "\n",
    "plt.subplot(2, 2, 3)\n",
    "sns.countplot(x='serve_depth', data=men_matches)\n",
    "plt.title('Men Serve Depth')\n",
    "\n",
    "plt.subplot(2, 2, 4)\n",
    "sns.countplot(x='serve_depth', data=women_matches)\n",
    "plt.title('Women Serve Depth')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "men_percentage_serve_width_values = {}\n",
    "for index in men_matches['serve_width'].value_counts().index:\n",
    "    men_percentage_serve_width_values[index] = round(men_matches['serve_width'].value_counts()[index] / \n",
    "    len(men_matches[men_matches['serve_width'].notnull()]) * 100, 2)\n",
    "    \n",
    "women_percentage_serve_width_values = {}\n",
    "for index in women_matches['serve_width'].value_counts().index:\n",
    "    women_percentage_serve_width_values[index] = round(women_matches['serve_width'].value_counts()[index] / \n",
    "    len(women_matches[women_matches['serve_width'].notnull()]) * 100, 2)\n",
    "\n",
    "men_percentage_serve_depth_values = {}\n",
    "for index in men_matches['serve_depth'].value_counts().index:\n",
    "    men_percentage_serve_depth_values[index] = round(men_matches['serve_depth'].value_counts()[index] /\n",
    "    len(men_matches[men_matches['serve_depth'].notnull()]) * 100, 2)\n",
    "    \n",
    "women_percentage_serve_depth_values = {}\n",
    "for index in women_matches['serve_depth'].value_counts().index:\n",
    "    women_percentage_serve_depth_values[index] = round(women_matches['serve_depth'].value_counts()[index] /\n",
    "    len(women_matches[women_matches['serve_depth'].notnull()]) * 100, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 8))\n",
    "\n",
    "plt.subplot(2, 2, 1)\n",
    "for key, value in men_percentage_serve_width_values.items():\n",
    "    plt.bar(key, value)\n",
    "plt.title('Percentage of Men Serve Width')\n",
    "    \n",
    "plt.subplot(2, 2, 2)\n",
    "for key, value in women_percentage_serve_width_values.items():\n",
    "    plt.bar(key, value)\n",
    "plt.title('Percentage of Women Serve Width')\n",
    "\n",
    "plt.subplots_adjust(hspace=0.4)\n",
    "\n",
    "plt.subplot(2, 2, 3)\n",
    "for key, value in men_percentage_serve_depth_values.items():\n",
    "    plt.bar(key, value)\n",
    "plt.title('Percentage of Men Serve Depth')\n",
    "    \n",
    "plt.subplot(2, 2, 4)\n",
    "for key, value in women_percentage_serve_depth_values.items():\n",
    "    plt.bar(key, value)\n",
    "plt.title('Percentage of Women Serve Depth')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data shows that the most popular serve in Men and Women's Tennis is the Down the T serve. About 30% of Men's serves are down the T, and about 25% of Women's serves are down the T. Male players also predominantly serve out wide with just over 25% of their serves being serves out wide. Women also like serving outwide with about 20% of their serves being serves out wide, but Women have a greater tendancy to serve closer to the body when serving out wide or up the T. About 10% of Male serves are into the body which show that Men are attempting to pull their opponents out of position when serving more often then not. Women only serve about 14% into the body, but the numbers show that they have a more balance serving strategy, whereas Men usually prefer to go Down the T or out Wide with more than 50% of their serves.\n",
    "\n",
    "\n",
    "Men also have a slightly higher rate of serving close to the line, with about 35% of their serves coming close to the line as opposed to around 30% for Women. The metrics measured on Men's serve width and depth, along with the higher serve speeds can explain the added amount of Aces for Men vs. Women."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a variable for all men points that are aces\n",
    "men_aces = men_matches[(men_matches['p1_ace'] == 1) | (men_matches['p2_ace'] == 1)]\n",
    "# Grouping ace points by serve width and serve depth, and coounting the total aces based on serve width & depth\n",
    "m_ace_by_serve = men_aces.groupby(['serve_width', 'serve_depth']).match_id.count().reset_index()\n",
    "# Setting serve_width, and serve_depth to the index of the m_ace_by_serve dataframe\n",
    "m_ace_by_serve.set_index(['serve_width', 'serve_depth'], inplace=True)\n",
    "# Renaming the 'match_id' column to 'total_aces' for better visibility\n",
    "m_ace_by_serve.rename(columns={'match_id': 'total_aces'}, inplace=True)\n",
    "\n",
    "# Creating an empty list to append calculated ace percentage based on serve width and depth\n",
    "pct_men_ace_by_serve = []\n",
    "\n",
    "for row in m_ace_by_serve['total_aces']:\n",
    "    # Summing the total amount of aces hit\n",
    "    total_aces = m_ace_by_serve['total_aces'].sum()\n",
    "    # Finding the average for each ace amount based on serve width and depth, and appending that to \n",
    "    # pct_men_ace_by_serve\n",
    "    pct_men_ace_by_serve.append(row / total_aces)\n",
    "\n",
    "# Adding the pct_men_ace_by_serve list to the m_ace_by_serve dataframe under the column pct_ace\n",
    "m_ace_by_serve['pct_ace'] = pct_men_ace_by_serve\n",
    "\n",
    "\n",
    "# Creating a variable for all women points that are aces\n",
    "women_aces = women_matches[(women_matches['p1_ace'] == 1) | (women_matches['p2_ace'] == 1)]\n",
    "# Grouping ace points by serve width and serve depth, and coounting the total aces based on serve width & depth\n",
    "w_ace_by_serve = women_aces.groupby(['serve_width', 'serve_depth']).match_id.count().reset_index()\n",
    "# Setting serve_width, and serve_depth to the index of the m_ace_by_serve dataframe\n",
    "w_ace_by_serve.set_index(['serve_width', 'serve_depth'], inplace=True)\n",
    "# Renaming the 'match_id' column to 'total_aces' for better visibility\n",
    "w_ace_by_serve.rename(columns={'match_id': 'total_aces'}, inplace=True)\n",
    "\n",
    "# Creating an empty list to append calculated ace percentage based on serve width and depth\n",
    "pct_women_ace_by_serve = []\n",
    "\n",
    "for row in w_ace_by_serve['total_aces']:\n",
    "    # Summing the total amount of aces hit\n",
    "    total_aces = w_ace_by_serve['total_aces'].sum()\n",
    "    # Finding the average for each ace amount based on serve width and depth, and appending that to \n",
    "    # pct_women_ace_by_serve\n",
    "    pct_women_ace_by_serve.append(row / total_aces)\n",
    "    \n",
    "# Adding the pct_women_ace_by_serve list to the w_ace_by_serve dataframe under the column pct_ace\n",
    "w_ace_by_serve['pct_ace'] = pct_women_ace_by_serve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 8))\n",
    "\n",
    "ax = plt.subplot(121)\n",
    "g=sns.barplot(x=m_ace_by_serve.index, y='pct_ace', data=m_ace_by_serve)\n",
    "g.set_xticklabels(g.get_xticklabels(), rotation=90)\n",
    "plt.title('Men % Aces per serve width and depth')\n",
    "\n",
    "ax_2 = plt.subplot(122)\n",
    "g=sns.barplot(x=w_ace_by_serve.index, y='pct_ace', data=w_ace_by_serve)\n",
    "g.set_xticklabels(g.get_xticklabels(), rotation=90)\n",
    "plt.title('Women % Aces per serve width and depth')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>serve_width</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Body</th>\n",
       "      <td>10866.0</td>\n",
       "      <td>148.459323</td>\n",
       "      <td>47.501899</td>\n",
       "      <td>0.0</td>\n",
       "      <td>143.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>173.0</td>\n",
       "      <td>236.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Body/ Center</th>\n",
       "      <td>19017.0</td>\n",
       "      <td>158.389546</td>\n",
       "      <td>48.208077</td>\n",
       "      <td>0.0</td>\n",
       "      <td>148.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>188.0</td>\n",
       "      <td>235.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Body/ Wide</th>\n",
       "      <td>20392.0</td>\n",
       "      <td>155.422421</td>\n",
       "      <td>44.754735</td>\n",
       "      <td>0.0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>164.0</td>\n",
       "      <td>181.0</td>\n",
       "      <td>236.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Down the T</th>\n",
       "      <td>33118.0</td>\n",
       "      <td>174.102754</td>\n",
       "      <td>46.900685</td>\n",
       "      <td>0.0</td>\n",
       "      <td>169.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>197.0</td>\n",
       "      <td>235.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wide</th>\n",
       "      <td>28899.0</td>\n",
       "      <td>161.883422</td>\n",
       "      <td>48.960486</td>\n",
       "      <td>0.0</td>\n",
       "      <td>159.0</td>\n",
       "      <td>173.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>231.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                count        mean        std  min    25%    50%    75%    max\n",
       "serve_width                                                                  \n",
       "Body          10866.0  148.459323  47.501899  0.0  143.0  156.0  173.0  236.0\n",
       "Body/ Center  19017.0  158.389546  48.208077  0.0  148.0  165.0  188.0  235.0\n",
       "Body/ Wide    20392.0  155.422421  44.754735  0.0  144.0  164.0  181.0  236.0\n",
       "Down the T    33118.0  174.102754  46.900685  0.0  169.0  187.0  197.0  235.0\n",
       "Wide          28899.0  161.883422  48.960486  0.0  159.0  173.0  187.0  231.0"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Grouping by serve width and gathering summary statistics on serve speed kmh with the describe() method\n",
    "men_info_per_serve_width = men_matches.groupby('serve_width')['serve_speed_kmh'].describe()\n",
    "\n",
    "men_info_per_serve_width"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>serve_width</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Body</th>\n",
       "      <td>8304.0</td>\n",
       "      <td>129.771797</td>\n",
       "      <td>42.037386</td>\n",
       "      <td>0.0</td>\n",
       "      <td>125.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>192.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Body/ Center</th>\n",
       "      <td>12498.0</td>\n",
       "      <td>136.900864</td>\n",
       "      <td>42.805275</td>\n",
       "      <td>0.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>146.0</td>\n",
       "      <td>161.0</td>\n",
       "      <td>197.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Body/ Wide</th>\n",
       "      <td>12584.0</td>\n",
       "      <td>132.842339</td>\n",
       "      <td>41.702024</td>\n",
       "      <td>0.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>193.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Down the T</th>\n",
       "      <td>14518.0</td>\n",
       "      <td>146.921752</td>\n",
       "      <td>42.796142</td>\n",
       "      <td>0.0</td>\n",
       "      <td>143.0</td>\n",
       "      <td>159.0</td>\n",
       "      <td>168.0</td>\n",
       "      <td>202.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wide</th>\n",
       "      <td>12132.0</td>\n",
       "      <td>135.189911</td>\n",
       "      <td>47.452838</td>\n",
       "      <td>0.0</td>\n",
       "      <td>135.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>159.0</td>\n",
       "      <td>196.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                count        mean        std  min    25%    50%    75%    max\n",
       "serve_width                                                                  \n",
       "Body           8304.0  129.771797  42.037386  0.0  125.0  138.0  152.0  192.0\n",
       "Body/ Center  12498.0  136.900864  42.805275  0.0  130.0  146.0  161.0  197.0\n",
       "Body/ Wide    12584.0  132.842339  41.702024  0.0  128.0  141.0  156.0  193.0\n",
       "Down the T    14518.0  146.921752  42.796142  0.0  143.0  159.0  168.0  202.0\n",
       "Wide          12132.0  135.189911  47.452838  0.0  135.0  149.0  159.0  196.0"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Grouping by serve width and gathering summary statistics on serve speed kmh with the describe() method\n",
    "women_info_per_serve_width = women_matches.groupby('serve_width')['serve_speed_kmh'].describe()\n",
    "\n",
    "women_info_per_serve_width"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x127046340>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x216 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a grid to plot serve speed kmh distributions for each serve width on one line\n",
    "g=sns.FacetGrid(data=men_matches[(men_matches['serve_speed_kmh'].notnull()) & (men_matches['serve_speed_kmh'] > 0)], \n",
    "                col='serve_width')\n",
    "\n",
    "# Plotting the distplots\n",
    "g.map(sns.distplot, 'serve_speed_kmh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Men Serve Speeds\n",
    "Body/ Wide serves look normally distributed with an average speed of 155 kmh, a median of 164 kmh and a standard deviation of 44 kmh. The max serve hit in this area is 193 kmh. I suspect an even amount of first and second serves are probably hit in this area.\n",
    "\n",
    "Down the T serves are slightly left skewed, but also look to be somewhat normally distributed. With the highest mean speed of 146 kmh out of all serve widths for Men, I suspect the left skew could be due to a larger amount of faster first serves being hit in this area. The median is 159, and the standard deviation is 42 which is not much different than other distributions which indicate that a majority of serves in this area are on the faster side with some potential outliers bringing the average down, with the max serve speed being 202 kmh.\n",
    "\n",
    "Wide Serves are slightly left skewed, but look to be normally distributed. Average serve speed is 161 kmh, with the fastest serve being 231 kmh. I presume that there are a decent amount of second serves, or slower first serves with more spin added to them being hit out wide which account for the left skewness.\n",
    "\n",
    "Body serves are right skewed with an average serve speed of 148 kmh. This is the slowest average out of all speeds. It seems that a majority of second serves are hit in this area. The distribution does indicate that a fair amount of fast first serves are hit in this area, however I think the majority of serves hit in this area are second serves.\n",
    "\n",
    "Lastly Body/ Center serves have a bimodal distribution, which can indicate a lot of slower second serves, and a lot of fast first serves. This distribution has an average serve speed of 158 kmh, which is right in the middle of the bimodal splits. It seems like there are probably an equal amount of fast first serves, and slower second serves hit in this area. I presume a lot of fast serves here are first serves that are aimed for the T, but come closer to the Body, and a lot of the slower serves are second serves that have more spin on them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x107d87610>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x216 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a grid to plot serve speed kmh distributions for each serve width on one line\n",
    "g=sns.FacetGrid(data=women_matches[(women_matches['serve_speed_kmh'].notnull()) & \n",
    "                                   (women_matches['serve_speed_kmh'] > 0)], \n",
    "                col='serve_width')\n",
    "\n",
    "# Plotting the distplots\n",
    "g.map(sns.distplot, 'serve_speed_kmh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Women Serve Speeds\n",
    "\n",
    "Body/ Wide serves are normally distributed with a slight left ske, with an average serve speed of 132 kmh, and a median of 141 kmh.\n",
    "\n",
    "Wide serves are normally distributed also with a slight left skew, with an average serve speed of 135 kmh, and a median of 149 kmh.\n",
    "\n",
    "Dow the T serves are left skewed, and contain the fastest serves out of all areas with an average serve speed of 146 kmh, and a median of 159 kmh. This makes sense that it would be the area with the fastest serves on average as it was the serve width area with the most percentage of aces.\n",
    "\n",
    "Body/ Center serves are normally distributed slightly left skewed with an average serve speed of 136 kmh.\n",
    "\n",
    "Body serves look to be right skewed, but have an average serve speed of 129 kmh, and a median of 138 kmh. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Looking at where men and women hit most of their double faults\n",
    "\n",
    "men_df = men_matches[(men_matches['p1_double_fault'] == 1) | (men_matches['p2_double_fault'] == 1)]\n",
    "men_df_gb = men_df.groupby('serve_width').match_id.count().reset_index()\n",
    "men_df_gb.rename(columns={'match_id': 'double_faults'}, inplace=True)\n",
    "men_df_gb['pct_double_fault'] = men_df_gb['double_faults'] / men_df_gb['double_faults'].sum()\n",
    "\n",
    "women_df = women_matches[(women_matches['p1_double_fault'] == 1) | (women_matches['p2_double_fault'] == 1)]\n",
    "women_df_gb = women_df.groupby('serve_width').match_id.count().reset_index()\n",
    "women_df_gb.rename(columns={'match_id': 'double_faults'}, inplace=True)\n",
    "women_df_gb['pct_double_fault'] = women_df_gb['double_faults'] / women_df_gb['double_faults'].sum()\n",
    "\n",
    "plt.figure(figsize=(15, 8))\n",
    "\n",
    "ax = plt.subplot(121)\n",
    "sns.barplot(x='serve_width', y='pct_double_fault', data=men_df_gb, palette='viridis')\n",
    "plt.title('Men % of double fault per serve width')\n",
    "\n",
    "ax_2 = plt.subplot(122, sharey=ax)\n",
    "sns.barplot(x='serve_width', y='pct_double_fault', data=women_df_gb, palette='viridis')\n",
    "plt.title('Women % of double fault per serve width')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For both Men and Women the nmajority of double faults come when they serve out wide. Men also serve over 20% of their double faults down the T, and around 19% of their double faults into the Body/ Center- In this case I'm guessing most of their serves are long.\n",
    "\n",
    "For Women they also hit over 30% of their serves out wide, however the remaining serve areas are more evenly distributed at around 16%, with Body/ Center serves being a little more then the other remainin serve areas.\n",
    "\n",
    "\n",
    "What this shows me is that if you're a returner, you might want to bait your oppenent to go for a second serve out wide to try and potentially force a double fault."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-36-e39afb68c9de>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  men_matches['shot_winner'] = men_matches.apply(lambda x: 1 if (x.p1_shot_winner == 1) | (x.p2_shot_winner == 1)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    377130\n",
       "1    193520\n",
       "Name: shot_winner, dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-37-43f17dec411a>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  women_matches['shot_winner'] = women_matches.apply(lambda x: 1 if (x.p1_shot_winner == 1) | (x.p2_shot_winner == 1)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    221613\n",
       "1     98339\n",
       "Name: shot_winner, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Men Winner Percentage: 33.91\n",
      "Women Winner Percentage: 30.74\n"
     ]
    }
   ],
   "source": [
    "print('Men Winner Percentage: {}'.format(round(100 * men_matches['shot_winner'].value_counts()[1] / \n",
    "                                                  (men_matches['shot_winner'].value_counts()[0] +\n",
    "                                               men_matches['shot_winner'].value_counts()[1]), 2)))\n",
    "\n",
    "print('Women Winner Percentage: {}'.format(round(100 * women_matches['shot_winner'].value_counts()[1] / \n",
    "                                                  (women_matches['shot_winner'].value_counts()[0] +\n",
    "                                               women_matches['shot_winner'].value_counts()[1]), 2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-39-69d37287e4f6>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  men_matches['unforced_errors'] = men_matches.apply(lambda x: 1 if (x.p1_unforced_error == 1) |\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    400082\n",
       "1    170568\n",
       "Name: unforced_errors, dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "men_matches['unforced_errors'] = men_matches.apply(lambda x: 1 if (x.p1_unforced_error == 1) | \n",
    "                                                  (x.p2_unforced_error == 1) else 0, axis=1)\n",
    "men_matches['unforced_errors'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-40-09e7c2981f68>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  women_matches['unforced_errors'] = women_matches.apply(lambda x: 1 if (x.p1_unforced_error == 1) |\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    205504\n",
       "1    114448\n",
       "Name: unforced_errors, dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "women_matches['unforced_errors'] = women_matches.apply(lambda x: 1 if (x.p1_unforced_error == 1) | \n",
    "                                                  (x.p2_unforced_error == 1) else 0, axis=1)\n",
    "women_matches['unforced_errors'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Men Percentage of Unforced Errors: 29.89\n",
      "Women Percentage of Unforced Errors: 35.77\n"
     ]
    }
   ],
   "source": [
    "print('Men Percentage of Unforced Errors: {}'.format(round(100 * men_matches['unforced_errors'].value_counts()[1] /\n",
    "                                                    (men_matches['unforced_errors'].value_counts()[0] +\n",
    "                                                    men_matches['unforced_errors'].value_counts()[1]), 2)))\n",
    "\n",
    "print('Women Percentage of Unforced Errors: {}'.format(round(100 * women_matches['unforced_errors'\n",
    "                                                                                ].value_counts()[1] /\n",
    "                                                    (women_matches['unforced_errors'].value_counts()[0] +\n",
    "                                                    women_matches['unforced_errors'].value_counts()[1]), 2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-42-aa54501484a5>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  men_matches['forced_error'] = men_matches.apply(lambda x: 1 if (x.p1_forced_error == 1) |\n",
      "<ipython-input-42-aa54501484a5>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  women_matches['forced_error'] = women_matches.apply(lambda x: 1 if (x.p1_forced_error == 1) |\n"
     ]
    }
   ],
   "source": [
    "men_matches['forced_error'] = men_matches.apply(lambda x: 1 if (x.p1_forced_error == 1) | \n",
    "                                               (x.p2_forced_error == 1) else 0, axis=1)\n",
    "\n",
    "women_matches['forced_error'] = women_matches.apply(lambda x: 1 if (x.p1_forced_error == 1) | \n",
    "                                               (x.p2_forced_error == 1) else 0, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Men Percentage of Forced Errors: 3.38\n",
      "Women Percentage of Forced Errors: 3.29\n"
     ]
    }
   ],
   "source": [
    "print('Men Percentage of Forced Errors: {}'.format(round(100 * men_matches['forced_error'].value_counts()[1] /\n",
    "                                                        (men_matches['forced_error'].value_counts()[0] + \n",
    "                                                        men_matches['forced_error'].value_counts()[1]), 2)))\n",
    "\n",
    "print('Women Percentage of Forced Errors: {}'.format(round(100 * women_matches['forced_error'].value_counts()[1] /\n",
    "                                                        (women_matches['forced_error'].value_counts()[0] + \n",
    "                                                        women_matches['forced_error'].value_counts()[1]), 2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Updating NaN values for winner_fh for men\n",
    "men_matches['winner_fh'].fillna(men_matches['winner_shot_type'].apply(lambda x: 1 if x == 'F' else 0), inplace=True)\n",
    "\n",
    "# Updating NaN values for winner_bh for men\n",
    "men_matches['winner_bh'].fillna(men_matches['winner_shot_type'].apply(lambda x: 1 if x == 'F' else 0), inplace=True)\n",
    "\n",
    "# Updating NaN values for winner_fh for men\n",
    "women_matches['winner_fh'].fillna(women_matches\n",
    "                                  ['winner_shot_type'].apply(lambda x: 1 if x == 'F' else 0), inplace=True)\n",
    "\n",
    "# Updating NaN values for winner_bh for men\n",
    "women_matches['winner_bh'].fillna(women_matches\n",
    "                                  ['winner_shot_type'].apply(lambda x: 1 if x == 'F' else 0), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Men Forehand Winner Percentage: 11.44\n",
      "Women Forehand Winner Percentage: 11.81\n"
     ]
    }
   ],
   "source": [
    "print('Men Forehand Winner Percentage: {}'.format(round(100 * men_matches['winner_fh'].value_counts()[1] /\n",
    "                                                        (men_matches['winner_fh'].value_counts()[0] + \n",
    "                                                        men_matches['winner_fh'].value_counts()[1]), 2)))\n",
    "\n",
    "print('Women Forehand Winner Percentage: {}'.format(round(100 * women_matches['winner_fh'].value_counts()[1] /\n",
    "                                                        (women_matches['winner_fh'].value_counts()[0] + \n",
    "                                                        women_matches['winner_fh'].value_counts()[1]), 2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Men Backhand Winner Percentage: 10.69\n",
      "Women Backhand Winner Percentage: 11.05\n"
     ]
    }
   ],
   "source": [
    "print('Men Backhand Winner Percentage: {}'.format(round(100 * men_matches['winner_bh'].value_counts()[1] /\n",
    "                                                        (men_matches['winner_bh'].value_counts()[0] + \n",
    "                                                        men_matches['winner_bh'].value_counts()[1]), 2)))\n",
    "\n",
    "print('Women Backhand Winner Percentage: {}'.format(round(100 * women_matches['winner_bh'].value_counts()[1] /\n",
    "                                                        (women_matches['winner_bh'].value_counts()[0] + \n",
    "                                                        women_matches['winner_bh'].value_counts()[1]), 2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>match_id</th>\n",
       "      <th>match_year</th>\n",
       "      <th>slam</th>\n",
       "      <th>match_num</th>\n",
       "      <th>player_1</th>\n",
       "      <th>player_2</th>\n",
       "      <th>match_status</th>\n",
       "      <th>match_winner</th>\n",
       "      <th>event_type</th>\n",
       "      <th>round</th>\n",
       "      <th>court_name</th>\n",
       "      <th>player_1_nation</th>\n",
       "      <th>player_2_nation</th>\n",
       "      <th>elapsed_time</th>\n",
       "      <th>set_number</th>\n",
       "      <th>p1_games_won</th>\n",
       "      <th>p2_games_won</th>\n",
       "      <th>set_winner</th>\n",
       "      <th>game_number</th>\n",
       "      <th>game_winner</th>\n",
       "      <th>point_number</th>\n",
       "      <th>point_winner</th>\n",
       "      <th>point_server</th>\n",
       "      <th>serve_speed_kmh</th>\n",
       "      <th>rally</th>\n",
       "      <th>p1_score</th>\n",
       "      <th>p2_score</th>\n",
       "      <th>p1_momentum</th>\n",
       "      <th>p2_momentum</th>\n",
       "      <th>p1_points_won</th>\n",
       "      <th>p2_points_won</th>\n",
       "      <th>p1_ace</th>\n",
       "      <th>p2_ace</th>\n",
       "      <th>p1_shot_winner</th>\n",
       "      <th>p2_shot_winner</th>\n",
       "      <th>p1_double_fault</th>\n",
       "      <th>p2_double_fault</th>\n",
       "      <th>p1_unforced_error</th>\n",
       "      <th>p2_unforced_error</th>\n",
       "      <th>p1_net_point</th>\n",
       "      <th>p2_net_point</th>\n",
       "      <th>p1_net_point_won</th>\n",
       "      <th>p2_net_point_won</th>\n",
       "      <th>p1_break_point</th>\n",
       "      <th>p2_break_point</th>\n",
       "      <th>p1_break_point_won</th>\n",
       "      <th>p2_break_point_won</th>\n",
       "      <th>p1_first_serve_in</th>\n",
       "      <th>p2_first_serve_in</th>\n",
       "      <th>p1_first_serve_won</th>\n",
       "      <th>p2_first_serve_won</th>\n",
       "      <th>p1_second_serve_in</th>\n",
       "      <th>p2_second_serve_in</th>\n",
       "      <th>p1_second_serve_won</th>\n",
       "      <th>p2_second_serve_won</th>\n",
       "      <th>p1_forced_error</th>\n",
       "      <th>p2_forced_error</th>\n",
       "      <th>history</th>\n",
       "      <th>speed_mph</th>\n",
       "      <th>p1_break_point_missed</th>\n",
       "      <th>p2_break_point_missed</th>\n",
       "      <th>serve_indicator</th>\n",
       "      <th>serve_direction</th>\n",
       "      <th>winner_fh</th>\n",
       "      <th>winner_bh</th>\n",
       "      <th>serving_to</th>\n",
       "      <th>serve_number</th>\n",
       "      <th>winner_type</th>\n",
       "      <th>winner_shot_type</th>\n",
       "      <th>p1_distance_run</th>\n",
       "      <th>p2_distance_run</th>\n",
       "      <th>rallycount</th>\n",
       "      <th>serve_width</th>\n",
       "      <th>serve_depth</th>\n",
       "      <th>return_depth</th>\n",
       "      <th>point_time</th>\n",
       "      <th>players_gender</th>\n",
       "      <th>shot_winner</th>\n",
       "      <th>unforced_errors</th>\n",
       "      <th>forced_error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>512249</th>\n",
       "      <td>2015-frenchopen-1101</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>1101.0</td>\n",
       "      <td>Novak Djokovic</td>\n",
       "      <td>Jarkko Nieminen</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>512250</th>\n",
       "      <td>2015-frenchopen-1101</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>1101.0</td>\n",
       "      <td>Novak Djokovic</td>\n",
       "      <td>Jarkko Nieminen</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>198.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12010.0</td>\n",
       "      <td>123.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>B</td>\n",
       "      <td>13.765</td>\n",
       "      <td>19.791</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0 days 00:00:00.000000000</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>512251</th>\n",
       "      <td>2015-frenchopen-1101</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>1101.0</td>\n",
       "      <td>Novak Djokovic</td>\n",
       "      <td>Jarkko Nieminen</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>00:00:27</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>195.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22410.0</td>\n",
       "      <td>121.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>B</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0 days 00:00:27.000000000</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>512252</th>\n",
       "      <td>2015-frenchopen-1101</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>1101.0</td>\n",
       "      <td>Novak Djokovic</td>\n",
       "      <td>Jarkko Nieminen</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>00:01:12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>133.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15</td>\n",
       "      <td>30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12020.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0 days 00:00:45.000000000</td>\n",
       "      <td>M</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>512253</th>\n",
       "      <td>2015-frenchopen-1101</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>1101.0</td>\n",
       "      <td>Novak Djokovic</td>\n",
       "      <td>Jarkko Nieminen</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>00:01:39</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>202.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15</td>\n",
       "      <td>40</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12420.0</td>\n",
       "      <td>125.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18.320</td>\n",
       "      <td>20.490</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0 days 00:00:27.000000000</td>\n",
       "      <td>M</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1051568</th>\n",
       "      <td>2019-wimbledon-1701</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>wimbledon</td>\n",
       "      <td>1701.0</td>\n",
       "      <td>Novak Djokovic</td>\n",
       "      <td>Roger Federer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>04:52:04</td>\n",
       "      <td>5.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>418.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>156.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>266.0</td>\n",
       "      <td>362.0</td>\n",
       "      <td>201.0</td>\n",
       "      <td>217.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21010.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>6.677</td>\n",
       "      <td>9.744</td>\n",
       "      <td>11.0</td>\n",
       "      <td>Body/ Center</td>\n",
       "      <td>Not Close to Line</td>\n",
       "      <td>Not Deep</td>\n",
       "      <td>0 days 00:00:39.000000000</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1051569</th>\n",
       "      <td>2019-wimbledon-1701</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>wimbledon</td>\n",
       "      <td>1701.0</td>\n",
       "      <td>Novak Djokovic</td>\n",
       "      <td>Roger Federer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>04:53:31</td>\n",
       "      <td>5.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>419.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>154.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>265.0</td>\n",
       "      <td>364.0</td>\n",
       "      <td>201.0</td>\n",
       "      <td>218.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12030.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.998</td>\n",
       "      <td>3.527</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Down the T</td>\n",
       "      <td>Not Close to Line</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0 days 00:01:27.000000000</td>\n",
       "      <td>M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1051570</th>\n",
       "      <td>2019-wimbledon-1701</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>wimbledon</td>\n",
       "      <td>1701.0</td>\n",
       "      <td>Novak Djokovic</td>\n",
       "      <td>Roger Federer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>04:54:18</td>\n",
       "      <td>5.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>420.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>194.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>268.0</td>\n",
       "      <td>364.0</td>\n",
       "      <td>202.0</td>\n",
       "      <td>218.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11010.0</td>\n",
       "      <td>121.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>4.005</td>\n",
       "      <td>5.464</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Down the T</td>\n",
       "      <td>Not Close to Line</td>\n",
       "      <td>Not Deep</td>\n",
       "      <td>0 days 00:00:47.000000000</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1051571</th>\n",
       "      <td>2019-wimbledon-1701</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>wimbledon</td>\n",
       "      <td>1701.0</td>\n",
       "      <td>Novak Djokovic</td>\n",
       "      <td>Roger Federer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>04:54:48</td>\n",
       "      <td>5.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>421.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>151.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>271.0</td>\n",
       "      <td>364.0</td>\n",
       "      <td>203.0</td>\n",
       "      <td>218.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12010.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>B</td>\n",
       "      <td>33.210</td>\n",
       "      <td>39.805</td>\n",
       "      <td>13.0</td>\n",
       "      <td>Wide</td>\n",
       "      <td>Close to Line</td>\n",
       "      <td>Not Deep</td>\n",
       "      <td>0 days 00:00:30.000000000</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1051572</th>\n",
       "      <td>2019-wimbledon-1701</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>wimbledon</td>\n",
       "      <td>1701.0</td>\n",
       "      <td>Novak Djokovic</td>\n",
       "      <td>Roger Federer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>event_MS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>04:56:59</td>\n",
       "      <td>5.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>422.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>143.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>274.0</td>\n",
       "      <td>362.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>218.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21024.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.624</td>\n",
       "      <td>4.347</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Body/ Wide</td>\n",
       "      <td>Not Close to Line</td>\n",
       "      <td>Not Deep</td>\n",
       "      <td>0 days 00:02:11.000000000</td>\n",
       "      <td>M</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>262815 rows × 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     match_id  match_year        slam  match_num  \\\n",
       "512249   2015-frenchopen-1101      2015.0  frenchopen     1101.0   \n",
       "512250   2015-frenchopen-1101      2015.0  frenchopen     1101.0   \n",
       "512251   2015-frenchopen-1101      2015.0  frenchopen     1101.0   \n",
       "512252   2015-frenchopen-1101      2015.0  frenchopen     1101.0   \n",
       "512253   2015-frenchopen-1101      2015.0  frenchopen     1101.0   \n",
       "...                       ...         ...         ...        ...   \n",
       "1051568   2019-wimbledon-1701      2019.0   wimbledon     1701.0   \n",
       "1051569   2019-wimbledon-1701      2019.0   wimbledon     1701.0   \n",
       "1051570   2019-wimbledon-1701      2019.0   wimbledon     1701.0   \n",
       "1051571   2019-wimbledon-1701      2019.0   wimbledon     1701.0   \n",
       "1051572   2019-wimbledon-1701      2019.0   wimbledon     1701.0   \n",
       "\n",
       "               player_1         player_2 match_status  match_winner  \\\n",
       "512249   Novak Djokovic  Jarkko Nieminen          NaN           NaN   \n",
       "512250   Novak Djokovic  Jarkko Nieminen          NaN           NaN   \n",
       "512251   Novak Djokovic  Jarkko Nieminen          NaN           NaN   \n",
       "512252   Novak Djokovic  Jarkko Nieminen          NaN           NaN   \n",
       "512253   Novak Djokovic  Jarkko Nieminen          NaN           NaN   \n",
       "...                 ...              ...          ...           ...   \n",
       "1051568  Novak Djokovic    Roger Federer          NaN           NaN   \n",
       "1051569  Novak Djokovic    Roger Federer          NaN           NaN   \n",
       "1051570  Novak Djokovic    Roger Federer          NaN           NaN   \n",
       "1051571  Novak Djokovic    Roger Federer          NaN           NaN   \n",
       "1051572  Novak Djokovic    Roger Federer          NaN           NaN   \n",
       "\n",
       "        event_type round court_name player_1_nation player_2_nation  \\\n",
       "512249    event_MS   NaN        NaN             NaN             NaN   \n",
       "512250    event_MS   NaN        NaN             NaN             NaN   \n",
       "512251    event_MS   NaN        NaN             NaN             NaN   \n",
       "512252    event_MS   NaN        NaN             NaN             NaN   \n",
       "512253    event_MS   NaN        NaN             NaN             NaN   \n",
       "...            ...   ...        ...             ...             ...   \n",
       "1051568   event_MS   NaN        NaN             NaN             NaN   \n",
       "1051569   event_MS   NaN        NaN             NaN             NaN   \n",
       "1051570   event_MS   NaN        NaN             NaN             NaN   \n",
       "1051571   event_MS   NaN        NaN             NaN             NaN   \n",
       "1051572   event_MS   NaN        NaN             NaN             NaN   \n",
       "\n",
       "        elapsed_time  set_number  p1_games_won  p2_games_won  set_winner  \\\n",
       "512249      00:00:00         1.0           0.0           0.0         NaN   \n",
       "512250      00:00:00         1.0           0.0           0.0         NaN   \n",
       "512251      00:00:27         1.0           0.0           0.0         NaN   \n",
       "512252      00:01:12         1.0           0.0           0.0         NaN   \n",
       "512253      00:01:39         1.0           0.0           0.0         NaN   \n",
       "...              ...         ...           ...           ...         ...   \n",
       "1051568     04:52:04         5.0          12.0          12.0         NaN   \n",
       "1051569     04:53:31         5.0          12.0          12.0         NaN   \n",
       "1051570     04:54:18         5.0          12.0          12.0         NaN   \n",
       "1051571     04:54:48         5.0          12.0          12.0         NaN   \n",
       "1051572     04:56:59         5.0          13.0          12.0         NaN   \n",
       "\n",
       "         game_number  game_winner  point_number  point_winner  point_server  \\\n",
       "512249           1.0          NaN           0.0           NaN           NaN   \n",
       "512250           1.0          NaN           1.0           NaN           NaN   \n",
       "512251           1.0          NaN           2.0           NaN           NaN   \n",
       "512252           1.0          NaN           3.0           NaN           NaN   \n",
       "512253           1.0          NaN           4.0           NaN           NaN   \n",
       "...              ...          ...           ...           ...           ...   \n",
       "1051568         25.0          NaN         418.0           NaN           NaN   \n",
       "1051569         25.0          NaN         419.0           NaN           NaN   \n",
       "1051570         25.0          NaN         420.0           NaN           NaN   \n",
       "1051571         25.0          NaN         421.0           NaN           NaN   \n",
       "1051572         25.0          NaN         422.0           NaN           NaN   \n",
       "\n",
       "         serve_speed_kmh  rally p1_score p2_score  p1_momentum  p2_momentum  \\\n",
       "512249               0.0    NaN        0        0          NaN          NaN   \n",
       "512250             198.0    NaN       15        0          NaN          NaN   \n",
       "512251             195.0    NaN       15       15          NaN          NaN   \n",
       "512252             133.0    NaN       15       30          NaN          NaN   \n",
       "512253             202.0    NaN       15       40          NaN          NaN   \n",
       "...                  ...    ...      ...      ...          ...          ...   \n",
       "1051568            156.0    NaN        4        2        266.0        362.0   \n",
       "1051569            154.0    NaN        4        3        265.0        364.0   \n",
       "1051570            194.0    NaN        5        3        268.0        364.0   \n",
       "1051571            151.0    NaN        6        3        271.0        364.0   \n",
       "1051572            143.0    NaN        0        0        274.0        362.0   \n",
       "\n",
       "         p1_points_won  p2_points_won  p1_ace  p2_ace  p1_shot_winner  \\\n",
       "512249             0.0            0.0     0.0     0.0             0.0   \n",
       "512250             1.0            0.0     0.0     0.0             1.0   \n",
       "512251             1.0            1.0     0.0     0.0             0.0   \n",
       "512252             1.0            2.0     0.0     0.0             0.0   \n",
       "512253             1.0            3.0     0.0     0.0             0.0   \n",
       "...                ...            ...     ...     ...             ...   \n",
       "1051568          201.0          217.0     0.0     0.0             0.0   \n",
       "1051569          201.0          218.0     0.0     0.0             0.0   \n",
       "1051570          202.0          218.0     0.0     0.0             1.0   \n",
       "1051571          203.0          218.0     0.0     0.0             1.0   \n",
       "1051572          204.0          218.0     0.0     0.0             0.0   \n",
       "\n",
       "         p2_shot_winner  p1_double_fault  p2_double_fault  p1_unforced_error  \\\n",
       "512249              0.0              0.0              0.0                0.0   \n",
       "512250              0.0              0.0              0.0                0.0   \n",
       "512251              1.0              0.0              0.0                0.0   \n",
       "512252              0.0              0.0              0.0                1.0   \n",
       "512253              0.0              0.0              0.0                1.0   \n",
       "...                 ...              ...              ...                ...   \n",
       "1051568             1.0              0.0              0.0                0.0   \n",
       "1051569             0.0              0.0              0.0                0.0   \n",
       "1051570             0.0              0.0              0.0                0.0   \n",
       "1051571             0.0              0.0              0.0                0.0   \n",
       "1051572             0.0              0.0              0.0                0.0   \n",
       "\n",
       "         p2_unforced_error  p1_net_point  p2_net_point  p1_net_point_won  \\\n",
       "512249                 0.0           0.0           0.0               0.0   \n",
       "512250                 0.0           0.0           1.0               0.0   \n",
       "512251                 0.0           0.0           1.0               0.0   \n",
       "512252                 0.0           0.0           0.0               0.0   \n",
       "512253                 0.0           1.0           0.0               0.0   \n",
       "...                    ...           ...           ...               ...   \n",
       "1051568                0.0           0.0           0.0               0.0   \n",
       "1051569                0.0           0.0           0.0               0.0   \n",
       "1051570                0.0           0.0           0.0               0.0   \n",
       "1051571                0.0           0.0           0.0               0.0   \n",
       "1051572                1.0           0.0           0.0               0.0   \n",
       "\n",
       "         p2_net_point_won  p1_break_point  p2_break_point  p1_break_point_won  \\\n",
       "512249                0.0             0.0             0.0                 0.0   \n",
       "512250                0.0             0.0             0.0                 0.0   \n",
       "512251                1.0             0.0             0.0                 0.0   \n",
       "512252                0.0             0.0             0.0                 0.0   \n",
       "512253                0.0             0.0             0.0                 0.0   \n",
       "...                   ...             ...             ...                 ...   \n",
       "1051568               0.0             0.0             0.0                 0.0   \n",
       "1051569               0.0             0.0             0.0                 0.0   \n",
       "1051570               0.0             0.0             0.0                 0.0   \n",
       "1051571               0.0             0.0             0.0                 0.0   \n",
       "1051572               0.0             0.0             0.0                 0.0   \n",
       "\n",
       "         p2_break_point_won  p1_first_serve_in  p2_first_serve_in  \\\n",
       "512249                  0.0                NaN                NaN   \n",
       "512250                  0.0                NaN                NaN   \n",
       "512251                  0.0                NaN                NaN   \n",
       "512252                  0.0                NaN                NaN   \n",
       "512253                  0.0                NaN                NaN   \n",
       "...                     ...                ...                ...   \n",
       "1051568                 0.0                NaN                NaN   \n",
       "1051569                 0.0                NaN                NaN   \n",
       "1051570                 0.0                NaN                NaN   \n",
       "1051571                 0.0                NaN                NaN   \n",
       "1051572                 0.0                NaN                NaN   \n",
       "\n",
       "         p1_first_serve_won  p2_first_serve_won  p1_second_serve_in  \\\n",
       "512249                  NaN                 NaN                 NaN   \n",
       "512250                  NaN                 NaN                 NaN   \n",
       "512251                  NaN                 NaN                 NaN   \n",
       "512252                  NaN                 NaN                 NaN   \n",
       "512253                  NaN                 NaN                 NaN   \n",
       "...                     ...                 ...                 ...   \n",
       "1051568                 NaN                 NaN                 NaN   \n",
       "1051569                 NaN                 NaN                 NaN   \n",
       "1051570                 NaN                 NaN                 NaN   \n",
       "1051571                 NaN                 NaN                 NaN   \n",
       "1051572                 NaN                 NaN                 NaN   \n",
       "\n",
       "         p2_second_serve_in  p1_second_serve_won  p2_second_serve_won  \\\n",
       "512249                  NaN                  NaN                  NaN   \n",
       "512250                  NaN                  NaN                  NaN   \n",
       "512251                  NaN                  NaN                  NaN   \n",
       "512252                  NaN                  NaN                  NaN   \n",
       "512253                  NaN                  NaN                  NaN   \n",
       "...                     ...                  ...                  ...   \n",
       "1051568                 NaN                  NaN                  NaN   \n",
       "1051569                 NaN                  NaN                  NaN   \n",
       "1051570                 NaN                  NaN                  NaN   \n",
       "1051571                 NaN                  NaN                  NaN   \n",
       "1051572                 NaN                  NaN                  NaN   \n",
       "\n",
       "         p1_forced_error  p2_forced_error  history  speed_mph  \\\n",
       "512249               NaN              NaN      NaN        0.0   \n",
       "512250               NaN              NaN  12010.0      123.0   \n",
       "512251               NaN              NaN  22410.0      121.0   \n",
       "512252               NaN              NaN  12020.0       82.0   \n",
       "512253               NaN              NaN  12420.0      125.0   \n",
       "...                  ...              ...      ...        ...   \n",
       "1051568              NaN              NaN  21010.0       97.0   \n",
       "1051569              NaN              NaN  12030.0       96.0   \n",
       "1051570              NaN              NaN  11010.0      121.0   \n",
       "1051571              NaN              NaN  12010.0       94.0   \n",
       "1051572              NaN              NaN  21024.0       89.0   \n",
       "\n",
       "         p1_break_point_missed  p2_break_point_missed  serve_indicator  \\\n",
       "512249                     0.0                    0.0              0.0   \n",
       "512250                     0.0                    0.0              2.0   \n",
       "512251                     0.0                    0.0              2.0   \n",
       "512252                     0.0                    0.0              2.0   \n",
       "512253                     0.0                    0.0              2.0   \n",
       "...                        ...                    ...              ...   \n",
       "1051568                    0.0                    0.0              2.0   \n",
       "1051569                    0.0                    0.0              2.0   \n",
       "1051570                    0.0                    0.0              1.0   \n",
       "1051571                    0.0                    0.0              1.0   \n",
       "1051572                    0.0                    0.0              1.0   \n",
       "\n",
       "         serve_direction  winner_fh  winner_bh serving_to  serve_number  \\\n",
       "512249               NaN        NaN        NaN        NaN           0.0   \n",
       "512250               NaN        NaN        NaN        NaN           1.0   \n",
       "512251               NaN        NaN        NaN        NaN           1.0   \n",
       "512252               NaN        NaN        NaN        NaN           2.0   \n",
       "512253               NaN        NaN        NaN        NaN           1.0   \n",
       "...                  ...        ...        ...        ...           ...   \n",
       "1051568              NaN        NaN        NaN        NaN           2.0   \n",
       "1051569              NaN        NaN        NaN        NaN           2.0   \n",
       "1051570              NaN        NaN        NaN        NaN           1.0   \n",
       "1051571              NaN        NaN        NaN        NaN           2.0   \n",
       "1051572              NaN        NaN        NaN        NaN           2.0   \n",
       "\n",
       "        winner_type winner_shot_type  p1_distance_run  p2_distance_run  \\\n",
       "512249            0                0            0.000            0.000   \n",
       "512250            0                B           13.765           19.791   \n",
       "512251            0                B            0.000            0.000   \n",
       "512252            0                0            0.000            0.000   \n",
       "512253            0                0           18.320           20.490   \n",
       "...             ...              ...              ...              ...   \n",
       "1051568           0                F            6.677            9.744   \n",
       "1051569           0                0            3.998            3.527   \n",
       "1051570           0                F            4.005            5.464   \n",
       "1051571           0                B           33.210           39.805   \n",
       "1051572           0                0            4.624            4.347   \n",
       "\n",
       "         rallycount   serve_width        serve_depth return_depth  \\\n",
       "512249          NaN           NaN                NaN          NaN   \n",
       "512250          NaN           NaN                NaN          NaN   \n",
       "512251          NaN           NaN                NaN          NaN   \n",
       "512252          NaN           NaN                NaN          NaN   \n",
       "512253          NaN           NaN                NaN          NaN   \n",
       "...             ...           ...                ...          ...   \n",
       "1051568        11.0  Body/ Center  Not Close to Line     Not Deep   \n",
       "1051569         1.0    Down the T  Not Close to Line          NaN   \n",
       "1051570         3.0    Down the T  Not Close to Line     Not Deep   \n",
       "1051571        13.0          Wide      Close to Line     Not Deep   \n",
       "1051572         2.0    Body/ Wide  Not Close to Line     Not Deep   \n",
       "\n",
       "                        point_time players_gender  shot_winner  \\\n",
       "512249                         NaN              M            0   \n",
       "512250   0 days 00:00:00.000000000              M            1   \n",
       "512251   0 days 00:00:27.000000000              M            1   \n",
       "512252   0 days 00:00:45.000000000              M            0   \n",
       "512253   0 days 00:00:27.000000000              M            0   \n",
       "...                            ...            ...          ...   \n",
       "1051568  0 days 00:00:39.000000000              M            1   \n",
       "1051569  0 days 00:01:27.000000000              M            0   \n",
       "1051570  0 days 00:00:47.000000000              M            1   \n",
       "1051571  0 days 00:00:30.000000000              M            1   \n",
       "1051572  0 days 00:02:11.000000000              M            0   \n",
       "\n",
       "         unforced_errors  forced_error  \n",
       "512249                 0             0  \n",
       "512250                 0             0  \n",
       "512251                 0             0  \n",
       "512252                 1             0  \n",
       "512253                 1             0  \n",
       "...                  ...           ...  \n",
       "1051568                0             0  \n",
       "1051569                0             0  \n",
       "1051570                0             0  \n",
       "1051571                0             0  \n",
       "1051572                1             0  \n",
       "\n",
       "[262815 rows x 80 columns]"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "men_matches[men_matches['p1_distance_run'].notnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 570650 entries, 0 to 1051572\n",
      "Data columns (total 80 columns):\n",
      "match_id                 570650 non-null object\n",
      "match_year               570650 non-null float64\n",
      "slam                     570650 non-null object\n",
      "match_num                570650 non-null float64\n",
      "player_1                 570650 non-null object\n",
      "player_2                 570650 non-null object\n",
      "match_status             451 non-null object\n",
      "match_winner             0 non-null float64\n",
      "event_type               570650 non-null object\n",
      "round                    52105 non-null object\n",
      "court_name               52105 non-null object\n",
      "player_1_nation          52105 non-null object\n",
      "player_2_nation          52105 non-null object\n",
      "elapsed_time             570650 non-null object\n",
      "set_number               570246 non-null float64\n",
      "p1_games_won             570246 non-null float64\n",
      "p2_games_won             570246 non-null float64\n",
      "set_winner               0 non-null float64\n",
      "game_number              570246 non-null float64\n",
      "game_winner              0 non-null float64\n",
      "point_number             570056 non-null float64\n",
      "point_winner             0 non-null float64\n",
      "point_server             0 non-null float64\n",
      "serve_speed_kmh          570246 non-null float64\n",
      "rally                    52105 non-null float64\n",
      "p1_score                 570246 non-null object\n",
      "p2_score                 570246 non-null object\n",
      "p1_momentum              253548 non-null float64\n",
      "p2_momentum              253548 non-null float64\n",
      "p1_points_won            570246 non-null float64\n",
      "p2_points_won            570246 non-null float64\n",
      "p1_ace                   570650 non-null float64\n",
      "p2_ace                   570650 non-null float64\n",
      "p1_shot_winner           570650 non-null float64\n",
      "p2_shot_winner           570650 non-null float64\n",
      "p1_double_fault          570650 non-null float64\n",
      "p2_double_fault          570650 non-null float64\n",
      "p1_unforced_error        570650 non-null float64\n",
      "p2_unforced_error        570650 non-null float64\n",
      "p1_net_point             570650 non-null float64\n",
      "p2_net_point             570650 non-null float64\n",
      "p1_net_point_won         570650 non-null float64\n",
      "p2_net_point_won         570650 non-null float64\n",
      "p1_break_point           570650 non-null float64\n",
      "p2_break_point           570650 non-null float64\n",
      "p1_break_point_won       570650 non-null float64\n",
      "p2_break_point_won       570650 non-null float64\n",
      "p1_first_serve_in        52105 non-null float64\n",
      "p2_first_serve_in        52105 non-null float64\n",
      "p1_first_serve_won       52105 non-null float64\n",
      "p2_first_serve_won       52105 non-null float64\n",
      "p1_second_serve_in       52105 non-null float64\n",
      "p2_second_serve_in       52105 non-null float64\n",
      "p1_second_serve_won      52105 non-null float64\n",
      "p2_second_serve_won      52105 non-null float64\n",
      "p1_forced_error          52105 non-null float64\n",
      "p2_forced_error          52105 non-null float64\n",
      "history                  568340 non-null float64\n",
      "speed_mph                570246 non-null float64\n",
      "p1_break_point_missed    570650 non-null float64\n",
      "p2_break_point_missed    570650 non-null float64\n",
      "serve_indicator          570650 non-null float64\n",
      "serve_direction          52105 non-null float64\n",
      "winner_fh                52105 non-null float64\n",
      "winner_bh                52105 non-null float64\n",
      "serving_to               16814 non-null object\n",
      "serve_number             354636 non-null float64\n",
      "winner_type              354680 non-null object\n",
      "winner_shot_type         354680 non-null object\n",
      "p1_distance_run          262815 non-null float64\n",
      "p2_distance_run          262815 non-null float64\n",
      "rallycount               180220 non-null float64\n",
      "serve_width              112292 non-null object\n",
      "serve_depth              112292 non-null object\n",
      "return_depth             86979 non-null object\n",
      "point_time               568060 non-null object\n",
      "players_gender           570650 non-null object\n",
      "shot_winner              570650 non-null int64\n",
      "unforced_errors          570650 non-null int64\n",
      "forced_error             570650 non-null int64\n",
      "dtypes: float64(56), int64(3), object(21)\n",
      "memory usage: 372.7+ MB\n"
     ]
    }
   ],
   "source": [
    "men_matches.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0    284533\n",
       "1.0    283964\n",
       "0.0      2153\n",
       "Name: serve_indicator, dtype: int64"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "men_matches.serve_indicator.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Breakpoints for Men vs. Women"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the average percentage of breakpoints for Men vs. Women matches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of Men Breakpoints: 8.12\n",
      "Percentage of Women Breakpoints: 5.67\n"
     ]
    }
   ],
   "source": [
    "men_p1_bp = men_matches['p1_break_point'].value_counts()\n",
    "men_p2_bp = men_matches['p2_break_point'].value_counts()\n",
    "\n",
    "men_breakpoints = men_p1_bp[1] + men_p2_bp[1]\n",
    "\n",
    "men_pct_breakpoints = men_breakpoints / len(men_matches[(men_matches['p1_break_point'].notnull()) & \n",
    "                                                       (men_matches['p2_break_point'].notnull())])\n",
    "\n",
    "women_p1_bp = women_matches['p1_break_point'].value_counts()[1]\n",
    "women_p2_bp = women_matches['p2_break_point'].value_counts()[1]\n",
    "\n",
    "women_breakpoints = women_p1_bp + women_p2_bp\n",
    "\n",
    "women_pct_breakpoints = women_p1_bp / len(women_matches[(women_matches['p1_break_point'].notnull()) &\n",
    "                                                       women_matches['p2_break_point'].notnull()])\n",
    "\n",
    "print('Percentage of Men Breakpoints: {}'.format(round(men_pct_breakpoints * 100, 2)))\n",
    "print('Percentage of Women Breakpoints: {}'.format(round(women_pct_breakpoints * 100, 2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "men_bp_missed = men_matches['p1_break_point_missed'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What I find highly interesting is that Women's matches have a smaller percentage of total breakpoints. I presumed that Women matches would have a higher percentage of total breakpoints since the assumption is that Women matches tend to have more breaks of serve. There could be two major reasons for the results above that I can think of. One is that Women do a better job of converting breakpoints on their initial breakpoint chance which would lead to less break points in total. Another reason could be due to the fact that Men's matches in the slams are best of 5 sets, whereas Women's matches are only best of 3 sets, therefore Men's matches are longer and could warrant more breakpoints, but then again that doesn't necessarily translate into a higher percentage of breakpoints."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of Breakpoints won by Men: 39.03\n",
      "Percentage of Breakpoints won by Women: 45.36\n"
     ]
    }
   ],
   "source": [
    "# Looking at breakpoints converted for men vs. Women\n",
    "\n",
    "m_p1_bp_won = men_matches['p1_break_point_won'].value_counts()[1]\n",
    "m_p2_bp_won = men_matches['p2_break_point_won'].value_counts()[1]\n",
    "men_break_points_won = m_p1_bp_won + m_p2_bp_won\n",
    "\n",
    "pct_men_bp_won = men_break_points_won / men_breakpoints\n",
    "\n",
    "w_p1_bp_won = women_matches['p1_break_point_won'].value_counts()[1]\n",
    "w_p2_bp_won = women_matches['p2_break_point_won'].value_counts()[1]\n",
    "women_break_points_won = w_p1_bp_won + w_p2_bp_won\n",
    "\n",
    "pct_women_bp_won = women_break_points_won / women_breakpoints\n",
    "\n",
    "print('Percentage of Breakpoints won by Men: {}'.format(round(pct_men_bp_won * 100, 2)))\n",
    "print('Percentage of Breakpoints won by Women: {}'.format(round(pct_women_bp_won * 100, 2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Although Women have a smaller chance of break point opportunities compared to Men, they do a slightly better job on converting on their break point opportunities. On average Women convert about 45% of their break point opportunities compared to only around 39% for Men. This is a pretty crazy stat, as Women almost have around a 1/2 chance of breaking serve on a breakpoint. This could be largely due to the slower average serve speed, and the higher frequency of closer to the body serves, coupled with less frequent serves near the line, giving the returner a better chance of getting the ball into play. The Second Serve percentage of points won by Women could be another factor - Women are only winning about 43% of their second serve points, and have a First Serve percentage of around 61%, so there's about a 22% chance that a Women will hit a second serve and loose the point on any given point. That's almost a 1/4 chance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x504 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Next I want to look at the general return depth for Men and Women, and then look at return depth on break points\n",
    "\n",
    "pct_men_return_depth = {}\n",
    "\n",
    "for index in men_matches['return_depth'].value_counts().index:\n",
    "    pct_men_return_depth[index] = men_matches['return_depth'].value_counts()[index] / len(\n",
    "        men_matches[men_matches['return_depth'].notnull()])\n",
    "    \n",
    "pct_women_return_depth = {}\n",
    "\n",
    "for index in women_matches['return_depth'].value_counts().index:\n",
    "    pct_women_return_depth[index] = women_matches['return_depth'].value_counts()[index] / len(\n",
    "        women_matches[women_matches['return_depth'].notnull()])   \n",
    "\n",
    "plt.figure(figsize=(15, 7))\n",
    "\n",
    "plt.subplot(2, 2, 1)\n",
    "sns.countplot(x='return_depth', data=men_matches)\n",
    "plt.title('Men Return Depth Totals')\n",
    "\n",
    "plt.subplot(2, 2, 2)\n",
    "sns.countplot(x='return_depth', data=women_matches)\n",
    "plt.title('Women Return Depth Totals')\n",
    "\n",
    "plt.subplots_adjust(hspace=0.4)\n",
    "\n",
    "plt.subplot(2, 2, 3)\n",
    "for key, value in pct_men_return_depth.items():\n",
    "    plt.bar(key, value)\n",
    "plt.title('Men Return Depth Percentage')\n",
    "    \n",
    "plt.subplot(2, 2, 4)\n",
    "for key, value in pct_women_return_depth.items():\n",
    "    plt.bar(key, value)\n",
    "plt.title('Women Return Depth Percentage')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x504 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "men_bp_df = men_matches[(men_matches['p1_break_point'] == 1) | (men_matches['p2_break_point'] == 1)]\n",
    "\n",
    "women_bp_df = women_matches[(women_matches['p1_break_point'] == 1) | (women_matches['p2_break_point'] == 1)]\n",
    "\n",
    "pct_men_bp_return_depth = {}\n",
    "\n",
    "for index in men_bp_df['return_depth'].value_counts().index:\n",
    "    pct_men_bp_return_depth[index] = men_bp_df['return_depth'].value_counts()[index] / len(\n",
    "        men_bp_df[men_bp_df['return_depth'].notnull()])\n",
    "    \n",
    "pct_women_bp_return_depth = {}\n",
    "\n",
    "for index in women_bp_df['return_depth'].value_counts().index:\n",
    "    pct_women_bp_return_depth[index] = women_bp_df['return_depth'].value_counts()[index] / len(\n",
    "        women_bp_df[women_bp_df['return_depth'].notnull()])   \n",
    "\n",
    "plt.figure(figsize=(15, 7))\n",
    "\n",
    "plt.subplot(2, 2, 1)\n",
    "sns.countplot(x='return_depth', data=men_bp_df)\n",
    "plt.title('Men Breakpoint Return Depth Totals')\n",
    "\n",
    "plt.subplot(2, 2, 2)\n",
    "sns.countplot(x='return_depth', data=women_bp_df)\n",
    "plt.title('Women Breakpoint Return Depth Totals')\n",
    "\n",
    "plt.subplots_adjust(hspace=0.4)\n",
    "\n",
    "plt.subplot(2, 2, 3)\n",
    "for key, value in pct_men_bp_return_depth.items():\n",
    "    plt.bar(key, value)\n",
    "plt.title('Men Breakpoint Return Depth Percentage')\n",
    "    \n",
    "plt.subplot(2, 2, 4)\n",
    "for key, value in pct_women_bp_return_depth.items():\n",
    "    plt.bar(key, value)\n",
    "plt.title('Women Breakpoint Return Depth Percentage')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Looking at the return depth on break point based on serve width\n",
    "\n",
    "# Creating an empty dictionary to store the information\n",
    "men_rd_based_on_serve = {}\n",
    "for sw in men_matches['serve_width'].value_counts().index:\n",
    "    men_rd_based_on_serve[sw] = {}\n",
    "    for sd in men_matches['serve_depth'].value_counts().index:\n",
    "        new_df = men_matches[(men_matches['serve_width'] == sw) & (men_matches['serve_depth'] == sd)]\n",
    "        men_rd_based_on_serve[sw].update({sd: []})\n",
    "        for i in range(len(men_matches['return_depth'].value_counts().index)):\n",
    "            men_rd_based_on_serve[sw][sd].append({new_df['return_depth'].value_counts().index[i]: \n",
    "                                                 new_df['return_depth'].value_counts()[i]})\n",
    "            \n",
    "# Creating an empty dictionary to store the information\n",
    "women_rd_based_on_serve = {}\n",
    "for sw in women_matches['serve_width'].value_counts().index:\n",
    "    women_rd_based_on_serve[sw] = {}\n",
    "    for sd in women_matches['serve_depth'].value_counts().index:\n",
    "        new_df = women_matches[(women_matches['serve_width'] == sw) & (women_matches['serve_depth'] == sd)]\n",
    "        women_rd_based_on_serve[sw].update({sd: []})\n",
    "        for i in range(len(women_matches['return_depth'].value_counts().index)):\n",
    "            women_rd_based_on_serve[sw][sd].append({new_df['return_depth'].value_counts().index[i]: \n",
    "                                                 new_df['return_depth'].value_counts()[i]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "men_rd_based_on_serve_df = pd.DataFrame.from_dict({(i,j): men_rd_based_on_serve[i][j] \n",
    "                            for i in men_rd_based_on_serve.keys() \n",
    "                            for j in men_rd_based_on_serve[i].keys()},\n",
    "                            orient='index')\n",
    "\n",
    "men_rd_based_on_serve_df.index = pd.MultiIndex.from_tuples(men_rd_based_on_serve_df.index)\n",
    "men_rd_based_on_serve_df.rename(columns={0: 'Not Deep',\n",
    "                                       1: 'Deep'}, inplace=True)\n",
    "men_rd_based_on_serve_df['Not Deep'] = men_rd_based_on_serve_df['Not Deep'].apply(lambda x: x.get('Not Deep'))\n",
    "men_rd_based_on_serve_df['Deep'] = men_rd_based_on_serve_df['Deep'].apply(lambda x: x.get('Deep'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "women_rd_based_on_serve_df = pd.DataFrame.from_dict({(i,j): women_rd_based_on_serve[i][j] \n",
    "                            for i in women_rd_based_on_serve.keys() \n",
    "                            for j in women_rd_based_on_serve[i].keys()},\n",
    "                            orient='index')\n",
    "\n",
    "women_rd_based_on_serve_df.index = pd.MultiIndex.from_tuples(women_rd_based_on_serve_df.index)\n",
    "women_rd_based_on_serve_df.rename(columns={0: 'Not Deep',\n",
    "                                       1: 'Deep'}, inplace=True)\n",
    "women_rd_based_on_serve_df['Not Deep'] = women_rd_based_on_serve_df['Not Deep'].apply(lambda x: x.get('Not Deep'))\n",
    "women_rd_based_on_serve_df['Deep'] = women_rd_based_on_serve_df['Deep'].apply(lambda x: x.get('Deep'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Not Deep</th>\n",
       "      <th>Deep</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Down the T</th>\n",
       "      <th>Not Close to Line</th>\n",
       "      <td>5354</td>\n",
       "      <td>3538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Close to Line</th>\n",
       "      <td>1541</td>\n",
       "      <td>1016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Body/ Wide</th>\n",
       "      <th>Not Close to Line</th>\n",
       "      <td>5349</td>\n",
       "      <td>4012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Close to Line</th>\n",
       "      <td>1142</td>\n",
       "      <td>984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Body/ Center</th>\n",
       "      <th>Not Close to Line</th>\n",
       "      <td>5136</td>\n",
       "      <td>3651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Close to Line</th>\n",
       "      <td>1490</td>\n",
       "      <td>1148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Wide</th>\n",
       "      <th>Not Close to Line</th>\n",
       "      <td>1545</td>\n",
       "      <td>1165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Close to Line</th>\n",
       "      <td>3703</td>\n",
       "      <td>2850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Body</th>\n",
       "      <th>Not Close to Line</th>\n",
       "      <td>3603</td>\n",
       "      <td>2519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Close to Line</th>\n",
       "      <td>833</td>\n",
       "      <td>584</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Not Deep  Deep\n",
       "Down the T   Not Close to Line      5354  3538\n",
       "             Close to Line          1541  1016\n",
       "Body/ Wide   Not Close to Line      5349  4012\n",
       "             Close to Line          1142   984\n",
       "Body/ Center Not Close to Line      5136  3651\n",
       "             Close to Line          1490  1148\n",
       "Wide         Not Close to Line      1545  1165\n",
       "             Close to Line          3703  2850\n",
       "Body         Not Close to Line      3603  2519\n",
       "             Close to Line           833   584"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "women_rd_based_on_serve_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Not Deep</th>\n",
       "      <th>Deep</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Down the T</th>\n",
       "      <th>Not Close to Line</th>\n",
       "      <td>10967</td>\n",
       "      <td>6966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Close to Line</th>\n",
       "      <td>3155</td>\n",
       "      <td>2053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Wide</th>\n",
       "      <th>Not Close to Line</th>\n",
       "      <td>3307</td>\n",
       "      <td>2348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Close to Line</th>\n",
       "      <td>8064</td>\n",
       "      <td>5764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Body/ Wide</th>\n",
       "      <th>Not Close to Line</th>\n",
       "      <td>8863</td>\n",
       "      <td>6119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Close to Line</th>\n",
       "      <td>1597</td>\n",
       "      <td>1155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Body/ Center</th>\n",
       "      <th>Not Close to Line</th>\n",
       "      <td>7875</td>\n",
       "      <td>5066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Close to Line</th>\n",
       "      <td>2294</td>\n",
       "      <td>1572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Body</th>\n",
       "      <th>Not Close to Line</th>\n",
       "      <td>4884</td>\n",
       "      <td>2949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Close to Line</th>\n",
       "      <td>1024</td>\n",
       "      <td>728</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Not Deep  Deep\n",
       "Down the T   Not Close to Line     10967  6966\n",
       "             Close to Line          3155  2053\n",
       "Wide         Not Close to Line      3307  2348\n",
       "             Close to Line          8064  5764\n",
       "Body/ Wide   Not Close to Line      8863  6119\n",
       "             Close to Line          1597  1155\n",
       "Body/ Center Not Close to Line      7875  5066\n",
       "             Close to Line          2294  1572\n",
       "Body         Not Close to Line      4884  2949\n",
       "             Close to Line          1024   728"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "men_rd_based_on_serve_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Next time - plot the return depths for different serve types, then look at different return depths for each\n",
    "# serve type on break points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a new dataframe grouping by serve_width, serve_depth and return depth and getting counts for\n",
    "# return depth for Men\n",
    "men_rd_based_on_serve_df_2 = men_matches.groupby(['serve_width', 'serve_depth', 'return_depth']).match_id.count().\\\n",
    "reset_index()\n",
    "\n",
    "# Setting the index to serve_width and serve_depth to create a multi layer index\n",
    "men_rd_based_on_serve_df_2.set_index(['serve_width', 'serve_depth'], inplace=True)\n",
    "\n",
    "# Creating a new column named 'Not Deep', and setting it equal to the counts of Not Deep values for each row based\n",
    "# on serve width and serve depth\n",
    "men_rd_based_on_serve_df_2['Not Deep'] = men_rd_based_on_serve_df_2.loc[\n",
    "    men_rd_based_on_serve_df_2['return_depth'] == 'Not Deep', 'match_id']\n",
    "# Creating a new column named 'Deep', and setting it equal to the counts of Not Deep values for each row based\n",
    "# on serve width and serve depth\n",
    "men_rd_based_on_serve_df_2['Deep'] = men_rd_based_on_serve_df_2.loc[\n",
    "    men_rd_based_on_serve_df_2['return_depth'] == 'Deep', 'match_id']\n",
    "\n",
    "# Dropping the return_depth and match_id columns\n",
    "men_rd_based_on_serve_df_2.drop(['return_depth', 'match_id'], axis=1, inplace=True)\n",
    "# Dropping the duplicate values\n",
    "men_rd_based_on_serve_df_2.drop_duplicates(inplace=True)\n",
    "\n",
    "# Creating a column for the total percentage of not deep returns for each serve type\n",
    "men_rd_based_on_serve_df_2['pct_not_deep'] = men_rd_based_on_serve_df_2['Not Deep'] / \\\n",
    "(men_rd_based_on_serve_df_2['Not Deep'] + men_rd_based_on_serve_df_2['Deep'])\n",
    "\n",
    "# Creating a column for the total percentage of deep returns for each serve type\n",
    "men_rd_based_on_serve_df_2['pct_deep'] = men_rd_based_on_serve_df_2['Deep'] / \\\n",
    "(men_rd_based_on_serve_df_2['Not Deep'] + men_rd_based_on_serve_df_2['Deep'])\n",
    "\n",
    "\n",
    "\n",
    "# Creating a new dataframe grouping by serve_width, serve_depth and return depth and getting counts for\n",
    "# return depth for Women\n",
    "women_rd_based_on_serve_df_2 = women_matches.groupby(['serve_width', 'serve_depth', 'return_depth']).match_id.\\\n",
    "count().reset_index()\n",
    "\n",
    "# Setting the index to serve_width and serve_depth to create a multi layer index\n",
    "women_rd_based_on_serve_df_2.set_index(['serve_width', 'serve_depth'], inplace=True)\n",
    "\n",
    "# Creating a new column named 'Not Deep', and setting it equal to the counts of Not Deep values for each row based\n",
    "# on serve width and serve depth\n",
    "women_rd_based_on_serve_df_2['Not Deep'] = women_rd_based_on_serve_df_2.loc[\n",
    "    women_rd_based_on_serve_df_2['return_depth'] == 'Not Deep', 'match_id']\n",
    "# Creating a new column named 'Deep', and setting it equal to the counts of Not Deep values for each row based\n",
    "# on serve width and serve depth\n",
    "women_rd_based_on_serve_df_2['Deep'] = women_rd_based_on_serve_df_2.loc[\n",
    "    women_rd_based_on_serve_df_2['return_depth'] == 'Deep', 'match_id']\n",
    "\n",
    "# Dropping the return_depth and match_id columns\n",
    "women_rd_based_on_serve_df_2.drop(['return_depth', 'match_id'], axis=1, inplace=True)\n",
    "# Dropping the duplicate values\n",
    "women_rd_based_on_serve_df_2.drop_duplicates(inplace=True)\n",
    "\n",
    "# Creating a column for the total percentage of not deep returns for each serve type\n",
    "women_rd_based_on_serve_df_2['pct_not_deep'] = women_rd_based_on_serve_df_2['Not Deep'] / \\\n",
    "(women_rd_based_on_serve_df_2['Not Deep'] + women_rd_based_on_serve_df_2['Deep'])\n",
    "\n",
    "# Creating a column for the total percentage of deep returns for each serve type\n",
    "women_rd_based_on_serve_df_2['pct_deep'] = women_rd_based_on_serve_df_2['Deep'] / \\\n",
    "(women_rd_based_on_serve_df_2['Not Deep'] + women_rd_based_on_serve_df_2['Deep'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plotting the \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20, 8))\n",
    "\n",
    "ax = plt.subplot(1, 2, 1)\n",
    "n=1\n",
    "t=2\n",
    "d=10\n",
    "w=0.8\n",
    "x_values = [t*element + w*n for element in range(d)]\n",
    "plt.bar(x_values, men_rd_based_on_serve_df_2['pct_not_deep'], label='Not Deep')\n",
    "n=2\n",
    "t=2\n",
    "d=10\n",
    "w=0.8\n",
    "x_values_2 = [t*element + w*n for element in range(d)]\n",
    "plt.bar(x_values_2, men_rd_based_on_serve_df_2['pct_deep'], label='Deep')\n",
    "ax.set_xticks(x_values)\n",
    "ax.set_xticklabels(men_rd_based_on_serve_df_2.index, rotation=75)\n",
    "plt.legend()\n",
    "plt.title('Men Percentage Return Depth per Serve Type')\n",
    "\n",
    "ax = plt.subplot(1, 2, 2)\n",
    "n=1\n",
    "t=2\n",
    "d=10\n",
    "w=0.8\n",
    "x_values = [t*element + w*n for element in range(d)]\n",
    "plt.bar(x_values, women_rd_based_on_serve_df_2['pct_not_deep'], label='Not Deep')\n",
    "n=2\n",
    "t=2\n",
    "d=10\n",
    "w=0.8\n",
    "x_values_2 = [t*element + w*n for element in range(d)]\n",
    "plt.bar(x_values_2, women_rd_based_on_serve_df_2['pct_deep'], label='Deep')\n",
    "ax.set_xticks(x_values)\n",
    "ax.set_xticklabels(women_rd_based_on_serve_df_2.index, rotation=75)\n",
    "plt.legend()\n",
    "plt.title('Women Percentage Return Depth per Serve Type')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-49-0b821b51fc3a>:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  men_return_bp['bp_won'] = np.where((men_return_bp['p1_break_point_won'] == 1) |\n",
      "<ipython-input-49-0b821b51fc3a>:16: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  women_return_bp['bp_won'] = np.where((women_return_bp['p1_break_point_won'] == 1) |\n"
     ]
    }
   ],
   "source": [
    "# Creating a dataframe for Male matches where one player has a breakpoint\n",
    "men_return_bp = men_matches[(men_matches['p1_break_point'] == 1) | (men_matches['p2_break_point'] == 1)]\n",
    "\n",
    "# Creating a new column the tells whether a breakpoint was won\n",
    "men_return_bp['bp_won'] = np.where((men_return_bp['p1_break_point_won'] == 1) | \n",
    "                                   (men_return_bp['p2_break_point_won'] == 1), 1, 0)\n",
    "# Creating a new dataframe to groupby serve_width, serve_depth, return_depth, and break point won\n",
    "men_return_bp_gb = men_return_bp.groupby(['serve_width', 'serve_depth', 'return_depth']\n",
    "                                        ).mean()['bp_won'].reset_index()\n",
    "\n",
    "men_return_bp_gb.set_index(['serve_width', 'serve_depth'], inplace=True)\n",
    "\n",
    "# Creating a dataframe for Women matches where one player has a breakpoint\n",
    "women_return_bp = women_matches[(women_matches['p1_break_point'] == 1) | (women_matches['p2_break_point'] == 1)]\n",
    "\n",
    "women_return_bp['bp_won'] = np.where((women_return_bp['p1_break_point_won'] == 1) | \n",
    "                                   (women_return_bp['p2_break_point_won'] == 1), 1, 0)\n",
    "\n",
    "women_return_bp_gb = women_return_bp.groupby(['serve_width', 'serve_depth', 'return_depth']\n",
    "                                        ).mean()['bp_won'].reset_index()\n",
    "\n",
    "women_return_bp_gb.set_index(['serve_width', 'serve_depth'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20, 8))\n",
    "\n",
    "ax = plt.subplot(121)\n",
    "g = sns.barplot(x=men_return_bp_gb.index, y='bp_won', data=men_return_bp_gb, hue='return_depth')\n",
    "g.set_xticklabels(g.get_xticklabels(), rotation=90)\n",
    "plt.title('Men Breakpoint Winning % based on Serve, and Return width/ depth')\n",
    "\n",
    "ax_2 = plt.subplot(122, sharex=ax)\n",
    "g = sns.barplot(x=women_return_bp_gb.index, y='bp_won', data=women_return_bp_gb, hue='return_depth')\n",
    "g.set_xticklabels(g.get_xticklabels(), rotation=90)\n",
    "plt.title('Women Breakpoint Winning % based on Serve, and Return width/ depth')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the visualization I can see a trend showing that Men do a better job of saving breakpoints. Something interesting I noticed is that on average Deep returns have a lower chance of converting a break point, which is contrary to what I initially thought.\n",
    "\n",
    "For Men, it appears that Wide serves close to the line yield the best chance of saving a break point. Down the T serves close to the line also yield a very good chance of saving a break point. As a returner having shorter returns seems to give you a better opportunity to convert your break point off of any serve that comes at you. I'm curious if this is due to just a higher volume of shorter returns, or if there's something at play here with bringing your opponent into the net for an opportunity to pass them with a passing shot, especially if the return is low which would make it hard to approach the net off of a strong shot.\n",
    "on Body serves close the the line Men have more than a 50% chance of winning the break point with a short return.\n",
    "\n",
    "\n",
    "For Women servers I see a similar trend of out wide serves and down the T serves close to the line being the best serves to fight off a break point. Body serves also can benefit the server, depending on the return depth.\n",
    "A difference in return depth is aparent, as Deep returns for Body + Close to Line serves, and Wide + Not Close to Line serves offer a better chance at converting a break point for the returner. \n",
    "For almost all body serves Women have a more than 50% chance of winning break point with a short return.\n",
    "\n",
    "For both Men and Women in general they have the best opportunity to break with Not Deep returns on Body serves."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "65835"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "men_matches.p1_second_serve_in.value_counts()[0] + men_matches.p2_second_serve_in.value_counts()[0] -\\\n",
    "men_matches.p1_double_fault.value_counts()[1] - men_matches.p2_double_fault.value_counts()[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    560724\n",
       "1.0      9926\n",
       "Name: p1_double_fault, dtype: int64"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "men_matches.p1_double_fault.value_counts()[1] + men_matches.p2_double_fault.value_counts()[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "84126"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "men_first_serves = men_matches[(men_matches['p1_first_serve_in'].notnull()) | \n",
    "                              (men_matches['p2_first_serve_in'].notnull())]\n",
    "\n",
    "men_first_serves.p1_second_serve_in.value_counts()[0] + men_first_serves.p2_second_serve_in.value_counts()[0] -\\\n",
    "men_first_serves.p1_double_fault.value_counts()[1] - men_first_serves.p2_double_fault.value_counts()[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    43038\n",
       "1.0     9067\n",
       "Name: p2_second_serve_in, dtype: int64"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "men_first_serves.p2_second_serve_in.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "match_id                       0\n",
       "match_year                 61590\n",
       "slam                       61590\n",
       "match_num                  61590\n",
       "player_1                   63693\n",
       "player_2                   62745\n",
       "match_status             1130827\n",
       "match_winner             1131392\n",
       "event_type                240790\n",
       "round                    1048375\n",
       "court_name               1048375\n",
       "player_1_nation          1048375\n",
       "player_2_nation          1048375\n",
       "elapsed_time                   0\n",
       "set_number                   640\n",
       "p1_games_won                 640\n",
       "p2_games_won                 640\n",
       "set_winner               1131392\n",
       "game_number                  640\n",
       "game_winner              1131392\n",
       "point_number                2204\n",
       "point_winner             1131392\n",
       "point_server             1131392\n",
       "serve_speed_kmh              640\n",
       "rally                    1016854\n",
       "p1_score                     640\n",
       "p2_score                     640\n",
       "p1_momentum               582925\n",
       "p2_momentum               582925\n",
       "p1_points_won                640\n",
       "p2_points_won                640\n",
       "p1_ace                         2\n",
       "p2_ace                         2\n",
       "p1_shot_winner                 2\n",
       "p2_shot_winner                 2\n",
       "p1_double_fault                2\n",
       "p2_double_fault                2\n",
       "p1_unforced_error              2\n",
       "p2_unforced_error              2\n",
       "p1_net_point                   0\n",
       "p2_net_point                   0\n",
       "p1_net_point_won               0\n",
       "p2_net_point_won               0\n",
       "p1_break_point                 0\n",
       "p2_break_point                 0\n",
       "p1_break_point_won             0\n",
       "p2_break_point_won             0\n",
       "p1_first_serve_in        1016854\n",
       "p2_first_serve_in        1016854\n",
       "p1_first_serve_won       1016854\n",
       "p2_first_serve_won       1016854\n",
       "p1_second_serve_in       1016854\n",
       "p2_second_serve_in       1016854\n",
       "p1_second_serve_won      1016854\n",
       "p2_second_serve_won      1016854\n",
       "p1_forced_error          1016854\n",
       "p2_forced_error          1016854\n",
       "history                     5850\n",
       "speed_mph                    640\n",
       "p1_break_point_missed          0\n",
       "p2_break_point_missed          0\n",
       "serve_indicator                0\n",
       "serve_direction          1048376\n",
       "winner_fh                1048376\n",
       "winner_bh                1048376\n",
       "serving_to               1104244\n",
       "serve_number              380372\n",
       "winner_type               380259\n",
       "winner_shot_type          380259\n",
       "p1_distance_run           543772\n",
       "p2_distance_run           543772\n",
       "rallycount                700553\n",
       "serve_width               867037\n",
       "serve_depth               867037\n",
       "return_depth              917196\n",
       "point_time                  6216\n",
       "players_gender            240790\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>match_year</th>\n",
       "      <th>slam</th>\n",
       "      <th>winner_fh</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>34339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011.0</td>\n",
       "      <td>usopen</td>\n",
       "      <td>27309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011.0</td>\n",
       "      <td>wimbledon</td>\n",
       "      <td>21368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012.0</td>\n",
       "      <td>ausopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2012.0</td>\n",
       "      <td>usopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2012.0</td>\n",
       "      <td>wimbledon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2013.0</td>\n",
       "      <td>ausopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2013.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2013.0</td>\n",
       "      <td>usopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2013.0</td>\n",
       "      <td>wimbledon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>ausopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>usopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>wimbledon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2015.0</td>\n",
       "      <td>ausopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2015.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2015.0</td>\n",
       "      <td>usopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2015.0</td>\n",
       "      <td>wimbledon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2016.0</td>\n",
       "      <td>ausopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2016.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2016.0</td>\n",
       "      <td>usopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2016.0</td>\n",
       "      <td>wimbledon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2017.0</td>\n",
       "      <td>ausopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2017.0</td>\n",
       "      <td>frenchopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2017.0</td>\n",
       "      <td>wimbledon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2018.0</td>\n",
       "      <td>usopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2018.0</td>\n",
       "      <td>wimbledon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2019.0</td>\n",
       "      <td>usopen</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2019.0</td>\n",
       "      <td>wimbledon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    match_year        slam  winner_fh\n",
       "0       2011.0  frenchopen      34339\n",
       "1       2011.0      usopen      27309\n",
       "2       2011.0   wimbledon      21368\n",
       "3       2012.0     ausopen          0\n",
       "4       2012.0  frenchopen          0\n",
       "5       2012.0      usopen          0\n",
       "6       2012.0   wimbledon          0\n",
       "7       2013.0     ausopen          0\n",
       "8       2013.0  frenchopen          0\n",
       "9       2013.0      usopen          0\n",
       "10      2013.0   wimbledon          0\n",
       "11      2014.0     ausopen          0\n",
       "12      2014.0  frenchopen          0\n",
       "13      2014.0      usopen          0\n",
       "14      2014.0   wimbledon          0\n",
       "15      2015.0     ausopen          0\n",
       "16      2015.0  frenchopen          0\n",
       "17      2015.0      usopen          0\n",
       "18      2015.0   wimbledon          0\n",
       "19      2016.0     ausopen          0\n",
       "20      2016.0  frenchopen          0\n",
       "21      2016.0      usopen          0\n",
       "22      2016.0   wimbledon          0\n",
       "23      2017.0     ausopen          0\n",
       "24      2017.0  frenchopen          0\n",
       "25      2017.0   wimbledon          0\n",
       "26      2018.0      usopen          0\n",
       "27      2018.0   wimbledon          0\n",
       "28      2019.0      usopen          0\n",
       "29      2019.0   wimbledon          0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test = df.groupby(['match_year', 'slam'])['winner_fh'].count().reset_index()\n",
    "\n",
    "test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Look at average percentage of breakpoints, and average percentage of breakpoints converted for men vs. women matches. Also look at the elapsed time for men vs. women matches, and average point length."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['match_id', 'match_year', 'slam', 'match_num', 'player_1', 'player_2',\n",
       "       'match_status', 'match_winner', 'event_type', 'round', 'court_name',\n",
       "       'player_1_nation', 'player_2_nation', 'elapsed_time', 'set_number',\n",
       "       'p1_games_won', 'p2_games_won', 'set_winner', 'game_number',\n",
       "       'game_winner', 'point_number', 'point_winner', 'point_server',\n",
       "       'serve_speed_kmh', 'rally', 'p1_score', 'p2_score', 'p1_momentum',\n",
       "       'p2_momentum', 'p1_points_won', 'p2_points_won', 'p1_ace', 'p2_ace',\n",
       "       'p1_shot_winner', 'p2_shot_winner', 'p1_double_fault',\n",
       "       'p2_double_fault', 'p1_unforced_error', 'p2_unforced_error',\n",
       "       'p1_net_point', 'p2_net_point', 'p1_net_point_won', 'p2_net_point_won',\n",
       "       'p1_break_point', 'p2_break_point', 'p1_break_point_won',\n",
       "       'p2_break_point_won', 'p1_first_serve_in', 'p2_first_serve_in',\n",
       "       'p1_first_serve_won', 'p2_first_serve_won', 'p1_second_serve_in',\n",
       "       'p2_second_serve_in', 'p1_second_serve_won', 'p2_second_serve_won',\n",
       "       'p1_forced_error', 'p2_forced_error', 'history', 'speed_mph',\n",
       "       'p1_break_point_missed', 'p2_break_point_missed', 'serve_indicator',\n",
       "       'serve_direction', 'winner_fh', 'winner_bh', 'serving_to',\n",
       "       'serve_number', 'winner_type', 'winner_shot_type', 'p1_distance_run',\n",
       "       'p2_distance_run', 'rallycount', 'serve_width', 'serve_depth',\n",
       "       'return_depth', 'point_time', 'players_gender'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "event_MS    52105\n",
       "event_WS    30912\n",
       "Name: event_type, dtype: int64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['event_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "def match_type(row):\n",
    "    if pd.isnull(row['event_type']):\n",
    "        if row['player_1'] in men_names or row['player_2'] in men_names:\n",
    "            row = 'event_MS'\n",
    "\n",
    "        elif row['player_1'] in women_names or row['player_2'] in women_names:\n",
    "            row = 'event_WS'\n",
    "            \n",
    "        return row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Looking to see which 50 players have played the most points in the last 10 years at the Grand Slam tournaments\n",
    "\n",
    "# Collecting value counts for Player 1\n",
    "vc_1 = df['player_1'].value_counts()\n",
    "# Collecting value counts for Player 2\n",
    "vc_2 = df['player_2'].value_counts()\n",
    "\n",
    "# Adding the value counts together for Player 1 and Player 2\n",
    "total_points_played = vc_1 + vc_2\n",
    "\n",
    "# Looking at the total points played for each player in the top 50 players of points played\n",
    "top_50_points_played = total_points_played.sort_values(ascending=False)[:50].reset_index()\n",
    "top_50_points_played.rename(columns={'index': 'Player', 0: 'Total Points Played'}, inplace=True)\n",
    "top_50_points_played"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plotting the top 50 players and the total amount of points they have played\n",
    "\n",
    "plt.figure(figsize=(20, 8))\n",
    "g = sns.barplot(x='Player', y='Total Points Played', data=top_50_points_played)\n",
    "g.set_xticklabels(g.get_xticklabels(), rotation=90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Not unspurpising at all the big 4 of Roger Federer, Rafael Nadal, Novak Djokovic, and Andy Murray have played the most points at the grand slams over the last 10 years. What I did find interesting is that Andy Murray has more points than Roger Federer and Rafael Nadal - this could be in part due to him playing longer matches then them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a dataframe for all of Roger Federer's matches and points\n",
    "federer = df[(df['player_1'] == 'Roger Federer') | (df['player_2'] == 'Roger Federer')]\n",
    "federer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a dataframe for all of Novak Djokovic's matches and points\n",
    "djokovic = df[(df['player_1'] == 'Novak Djokovic') | (df['player_2'] == 'Novak Djokovic')]\n",
    "djokovic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a dataframe for all of Rafael Nadal's matches and points\n",
    "nadal = df[(df['player_1'] == 'Rafael Nadal') | (df['player_2'] == 'Rafael Nadal')]\n",
    "nadal"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
